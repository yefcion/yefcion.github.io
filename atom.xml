<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一均七声</title>
  
  <subtitle>上云台去</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-10-30T12:55:33.789Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>青实</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>十大排序算法</title>
    <link href="http://yoursite.com/2019/10/30/160-%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2019/10/30/160-十大排序算法/</id>
    <published>2019-10-30T12:39:46.000Z</published>
    <updated>2019-10-30T12:55:33.789Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>转载： <a href="https://www.cnblogs.com/xiaohuiduan/" target="_blank" rel="noopener">于风‘s blog</a></p><h1 id="算法之排序"><a href="#算法之排序" class="headerlink" title="算法之排序"></a>算法之排序</h1><p>排序算法基本上是我们无论是在项目中还是在面试中都会遇到的问题，加上最近在看《算法》这本书，所以就准备好好的将排序算法整理一下。</p><blockquote><p>所有排序算法都是基于 Java 实现，为了简单，只使用了int类型，从小到大排序</p></blockquote><ul><li>基本排序</li><li>高效的排序</li><li>各大排序的时间测试</li><li>如何选择排序</li></ul><h2 id="排序之基本排序算法"><a href="#排序之基本排序算法" class="headerlink" title="排序之基本排序算法"></a>排序之基本排序算法</h2><p>准备阶段：有一个交换位置的函数exc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 交换a数组中i和j的位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a 需要交换的数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> i 位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> j 位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exc</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 当他们相等的时候就没必要进行交换</span></span><br><span class="line">    <span class="keyword">if</span>(a[i] != a[j])&#123;</span><br><span class="line">        a[i] ^= a[j];</span><br><span class="line">        a[j] ^= a[i];</span><br><span class="line">        a[i] ^= a[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基本排序算法主要是分为插入排序，选择排序，冒泡排序和梳排序。</p><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p><strong>原理：</strong> 选择排序的原理很简单，就是从需要排序的数据中<code>选择</code>最小的（从小到大排序），然后放在第一个，选择第二小的放在第二个……</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 选择排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a 进行排序的数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] selectionSort(<span class="keyword">int</span> a[])&#123;</span><br><span class="line">    <span class="keyword">int</span> min;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)&#123;</span><br><span class="line">        min = i;</span><br><span class="line">        <span class="comment">// 这个for循环是为了找出最小的值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; a.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[min]&gt;a[j])&#123;</span><br><span class="line">                min = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/** 如果第一个取出的元素不是最小值，就进行交换</span></span><br><span class="line"><span class="comment">         * 意思就是：如果取出的元素就是最小值，那么就没有必要进行交换了    */</span></span><br><span class="line">        <span class="keyword">if</span>(min != i)&#123;</span><br><span class="line">            <span class="comment">// 进行交换</span></span><br><span class="line">            exc(a, i, min);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选择排序的动画演示</p><p><img src="https://img2018.cnblogs.com/blog/1439869/201907/1439869-20190717181858504-1948293626.gif" alt="img"></p><ul><li><p>假如数组的长度是N，则时间复杂度：</p><p>进行比较的次数：(N-1)+(N-2)+……+1 = N(N-1)/2</p><p>进行交换的次数：N</p></li><li><p>特点：（稳定）</p><ol><li>运行时间与输入无关。因为前一次的扫描并不能为后面的提供信息。</li><li>数据的移动次数是最小的。</li></ol></li></ul><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p><strong>原理：</strong> 如果数组进行循环得到a，若a比a前面的一个数小，则a就与前面数交换位置（相当于a向前面移动一位），若移动后a任然比前面一个数小，则再向前移动一位……</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 插入排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a 进行排序的数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回排序好的数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] insertSort(<span class="keyword">int</span> a[]) &#123;</span><br><span class="line">    <span class="keyword">int</span> N = a.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">        <span class="comment">// 如果a[i]比前面的数字小，则a[i]向前挪</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt;<span class="number">0</span> &amp;&amp; (a[j-<span class="number">1</span>]&gt;a[j]); j--) &#123;</span><br><span class="line">            exc(a, j, j-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>动画演示：</p><p><img src="https://img2018.cnblogs.com/blog/1439869/201907/1439869-20190717181905771-748910235.gif" alt="img"></p><ul><li><p>若数组的长度是N（不重复 ），则时间复杂度：</p><ol><li>平均：N<em>N/4 次比较，N</em>N/4次交换</li><li>最好：N-1次比较，0次交换</li><li>最坏：N<em>N/2次比较， N</em>N/2次交换</li></ol></li><li><p>特点：</p><p>若数据倒置的数量很少时，速度快。</p></li></ul><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p><strong>原理：</strong> 冒泡排序的原理就是小的数字慢慢的往上浮。从数组最后面开始循环，如果一个数比它前面数小，则交换两者位置。</p><p><strong>代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 冒泡排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] bubbleSort(<span class="keyword">int</span>[] a) &#123;</span><br><span class="line">    <span class="keyword">int</span> N = a.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 小的数字向上冒泡</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>  j= N-<span class="number">1</span>; j &gt; i; j--) &#123;</span><br><span class="line">            <span class="comment">// 交换位置</span></span><br><span class="line">            <span class="keyword">if</span>(a[j-<span class="number">1</span>]&gt;a[j])&#123;</span><br><span class="line">                exc(a, j-<span class="number">1</span>, j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>冒泡排序的动画示意图：</p><p>这个示意图和代码刚好相反，这个是将大的向后下沉</p><p><img src="https://img2018.cnblogs.com/blog/1439869/201907/1439869-20190717181912469-1066135142.jpg" alt="img"></p><p>时间复杂度：</p><ol><li>平均情况下：冒泡比较的次数约是插入排序的两倍，移动次数一致。</li><li>平均情况下：冒泡与选择排序的比较此时是一样的，移动比选择排序多出n次</li></ol><p>冒泡算法的改进：</p><p>改进部分就是，如果在第二层for循环中，如果不发生交换，则代表数据已经排好序了，不需要继续排序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 冒泡排序的优化</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] bubbleSort2(<span class="keyword">int</span>[] a) &#123;</span><br><span class="line">    <span class="keyword">int</span> N = a.length;</span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N - <span class="number">1</span> &amp;&amp; flag; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> j = N-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (flag = <span class="keyword">false</span>; j &gt; i; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j-<span class="number">1</span>]&gt;a[j])&#123;</span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">                exc(a, j-<span class="number">1</span>, j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>bubbleSort2()并不是一个多么令人欣喜的改进，但是基于bubbleSort2()的梳排序，却值得研究一下</p><p> ——《C++数据结构与算法》</p></blockquote><h2 id="排序之高效排序算法"><a href="#排序之高效排序算法" class="headerlink" title="排序之高效排序算法"></a>排序之高效排序算法</h2><h3 id="梳排序"><a href="#梳排序" class="headerlink" title="梳排序"></a>梳排序</h3><p><strong>原理：</strong> 梳排序分为两部分，第一部分通过步长stepn进行简单的排序，将大的数据集中到后面。第二部分是使用bubbleSort2()进行排序。</p><p>通过第一部分step的比较，我们能够有效的消除数组中的乌龟(即在数组尾部的较小的数值)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 梳排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] combSort(<span class="keyword">int</span>[] a) &#123;</span><br><span class="line">    <span class="keyword">int</span> N = a.length;</span><br><span class="line">    <span class="keyword">int</span> step = N;</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="comment">// 第一部分</span></span><br><span class="line">    <span class="keyword">while</span>((step /= <span class="number">1.3</span>) &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = N-<span class="number">1</span>; i &gt;= step; i--) &#123;</span><br><span class="line">            k = i -step;</span><br><span class="line">            <span class="keyword">if</span>(a[k]&gt;a[i])&#123;</span><br><span class="line">                <span class="comment">// 交换位置</span></span><br><span class="line">                exc(a, k, i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 第二部分：进行冒泡排序</span></span><br><span class="line">    a= bubbleSort2(a);</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>梳排序动画示意图：</p><p><img src="https://img2018.cnblogs.com/blog/1439869/201907/1439869-20190717181920250-1497473571.gif" alt="Comb sort demo.gif"></p><p>在梳排序中，原作者用随机数做实验，得到了最有效的递减效率是1.3。也就是<code>step/=1.3</code>,同样也可以写成<code>step *= 0.8</code>,因为编程语言乘法比除法快。</p><h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><p>希尔排序是基于插入排序进行改进，又称之为<code>递减增量排序</code>。在前面中我们知道，插入排序是将小的元素往前挪动位置，并且每次只移动一个位置。那么希尔排序是怎么解决这个问题的呢？</p><p><strong>原理</strong>：希尔排序的理念和梳排序的理念有点类似。在梳排序中，我们比较距离相差为<code>step</code>的两个元素来完成交换。在希尔排序中，我们的做法也是类似。我们在数组中每隔<code>h</code>取出数组中的元素，然后进行插入排序。当h=1时，则就是前面所写的插入排序了。</p><p><img src="https://img2018.cnblogs.com/blog/1439869/201907/1439869-20190717181926472-891194513.jpg" alt="原理图"></p><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * shell排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] shellSort(<span class="keyword">int</span>[] a)&#123;</span><br><span class="line">    <span class="keyword">int</span> N = a.length;</span><br><span class="line">    <span class="keyword">int</span> h = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 增量序列</span></span><br><span class="line">    <span class="keyword">while</span>(h &lt; N/<span class="number">3</span>)&#123;</span><br><span class="line">        <span class="comment">// h = 1,4,13,40,……</span></span><br><span class="line">        h = h*<span class="number">3</span> + <span class="number">1</span>; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(h&gt;=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = h; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="comment">// 进行插入排序，诺a[j]比a[j-h]小，则向前挪动h</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &gt;= h &amp;&amp; a[j-h]&gt;a[j]; j -= h) &#123;</span><br><span class="line">                exc(a, j, j-h);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        h /= <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p><strong>原理：</strong> 快速排序使用分治法（Divide and conquer）策略来把一个序列分为较小和较大的2个子序列，然后递归地排序两个子序列。</p><p>步骤为：</p><ol><li>挑选基准值：从数列中挑出一个元素，称为“基准”（pivot），</li><li>分割：重新排序数列，所有比基准值小的元素摆放在基准前面，所有比基准值大的元素摆在基准后面（与基准值相等的数可以到任何一边）。在这个分割结束之后，对基准值的排序就已经完成，</li><li>递归排序子序列：递归地将小于基准值元素的子序列和大于基准值元素的子序列排序。</li></ol><p>递归到最底部的判断条件是数列的大小是零或一，此时该数列显然已经有序。</p><blockquote><p>选取基准值有数种具体方法，此选取方法对排序的时间性能有决定性影响。</p></blockquote><p><strong>快速排序的实现代码：</strong></p><p>在前面我们知道，选取正确的基准值对排序的性能有着决定性的影响，在这里我们选择序列中间的值作为基准值。</p><p>代码主要分为两个部分：</p><ol><li>进行切分的代码</li><li>进行递归调用的代码</li></ol><p><strong>第一部分</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 进行切分，并进行交换</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a 数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> lo 切分开始的位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> h 切分结束的位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回分界点的位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span> lo,<span class="keyword">int</span> h)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 选取中间的值为基准值</span></span><br><span class="line">    <span class="keyword">int</span> middle = (lo+h+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> v = a[middle];</span><br><span class="line">    <span class="comment">// 将基准值和a[lo]交换位置</span></span><br><span class="line">    exc(a, lo, middle);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> i = lo;</span><br><span class="line">    <span class="keyword">int</span> j = h+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 假如左边的小于基准值，则一直进行循环</span></span><br><span class="line">        <span class="keyword">while</span>(a[++i] &lt; v)&#123;</span><br><span class="line">            <span class="comment">// 防止越界</span></span><br><span class="line">            <span class="keyword">if</span>(i == h)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 假如右边的大于基准值，则一直进行循环</span></span><br><span class="line">        <span class="keyword">while</span>(a[--j]&gt;v)&#123;</span><br><span class="line">            <span class="keyword">if</span>(j == lo)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 一旦i&gt;=j则代表i前面的除第一个外都比基准值小，j后面的都比基准值大，这时候就可以跳出循环了</span></span><br><span class="line">        <span class="keyword">if</span>(i&gt;=j)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 进行交换(因为a[lo]&gt;v,a[h]&lt;v，所以将两者进行交换)</span></span><br><span class="line">        exc(a, i,j);   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将基准放到分界点</span></span><br><span class="line">    exc(a, lo, j);</span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第二部分：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 调用quickSort函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a 数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] a)</span></span>&#123;</span><br><span class="line">        quickSort(a,<span class="number">0</span>,a.length-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 进行递归的快排</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> lo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> h</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span> lo,<span class="keyword">int</span> h)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(h &lt;= lo) &#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// j为基准值的位置</span></span><br><span class="line">    <span class="keyword">int</span> j = partition(a, lo, h);</span><br><span class="line">    <span class="comment">// 进行递归调用，将j前面的进行快排</span></span><br><span class="line">    quickSort(a,lo,j-<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 进行递归调用，将j后面的进行快排</span></span><br><span class="line">    quickSort(a,j+<span class="number">1</span>,h);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>快速排序动画示意图</strong>：</p><p><img src="https://img2018.cnblogs.com/blog/1439869/201907/1439869-20190717181932034-1356049951.gif" alt="Sorting quicksort anim.gif"></p><p><strong>特点：</strong></p><p>快速排序在最坏的情况下时间复杂度是O(n**2),平均时间复杂度是O(nlogn)。快速排序基本上被认为是相同数量级的所有排序算法中，平均性能最好的。</p><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><p>原理：堆排序是利用堆这个数据结构而设计的一种排序算法。</p><blockquote><p>堆是具有以下性质的完全二叉树：每个结点的值都大于或等于其左右孩子结点的值，称为大顶堆；或者每个结点的值都小于或等于其左右孩子结点的值，称为小顶堆。</p></blockquote><p>接下来我们将使用<code>大顶堆</code>来进行从小到大的排序。<a href="https://www.cnblogs.com/chengxiao/p/6129630.html" target="_blank" rel="noopener">图源</a>这位大佬讲的不错！！</p><p><img src="https://img2018.cnblogs.com/blog/1439869/201907/1439869-20190717181937630-925955971.png" alt="img"></p><p>在一个堆中，位置k的结点的父元素的位置是<code>(k+1)/2-1</code>，而它的两个子节点的位置分别是<code>2k+1</code>和<code>2k+2</code>，这样我们就可以通过计算数组的索引在树中上下移动。</p><p>那么我们 进行堆排序， 应该怎么做呢？首先，我们得构建一个堆（大顶堆）。构建的思路就是：我们将小的元素下沉（sink()）即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 小的结点往下移动</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> k 开始移动的位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> N 下沉结束位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sink</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span> k,<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 满足向下移动的条件</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">2</span>*k+<span class="number">1</span> &lt;= N)&#123;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">2</span>*k + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 从 a[j]和a[j+1]中a比较出较大的元素</span></span><br><span class="line">        <span class="keyword">if</span>(j &lt; N -<span class="number">1</span> &amp;&amp; a[j+<span class="number">1</span>] &gt; a[j])&#123;</span><br><span class="line">            j ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(a[j] &lt; a[k])&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将大的元素移动到上面去 </span></span><br><span class="line">        exc(a, k, j);</span><br><span class="line">        k = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们通过调用sink()函数和一些逻辑就可以得到一个大顶堆了。【注意：在大顶堆中，可以很简单的知道堆顶的元素是最大值】那么我们如何进行堆排序呢？这时候我们可以将对顶的元素移动到最后使得末尾的元素最大，然后我们继续调用sink函数，又可以使得堆顶的元素最大（实则为总的第二大），然后继续重复以前的操作即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heepSort</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N = a.length;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造一个堆有序</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = N/<span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        sink(a, i,N - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    N = N -<span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 然后进行下沉排序</span></span><br><span class="line">    <span class="keyword">while</span>(N&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        exc(a, <span class="number">0</span>, N--);</span><br><span class="line">        sink(a, <span class="number">0</span>,N);</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>动画演示：</strong></p><p><img src="https://img2018.cnblogs.com/blog/1439869/201907/1439869-20190717181944144-626869333.jpg" alt="img"></p><p><strong>堆排序的特点：</strong></p><ul><li>最好、最坏、平均的时间复杂都为O(nlogn)，空间复杂度为O(1)。</li><li>是一种不稳定的排序。</li></ul><h2 id="牺牲空间节约时间的高效排序"><a href="#牺牲空间节约时间的高效排序" class="headerlink" title="牺牲空间节约时间的高效排序"></a>牺牲空间节约时间的高效排序</h2><h3 id="归并排序（Merge-Sort）"><a href="#归并排序（Merge-Sort）" class="headerlink" title="归并排序（Merge Sort）"></a>归并排序（Merge Sort）</h3><p>归并排序的核心思想是分治法，是创建在归并操作上面的一种有效的排序算法。</p><p><strong>原理：</strong></p><p>采用分治法:</p><ul><li><p>分割：递归地把当前序列平均分割成两半。</p></li><li><p>集成：在保持元素顺序的同时将上一步得到的子序列集成到一起（归并）。</p><p>原理图：<img src="https://img2018.cnblogs.com/blog/1439869/201907/1439869-20190717181950255-926404107.gif" alt="img"></p></li></ul><p><strong>代码实现：</strong></p><p>首先我们来实现数组之间的归并操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 临时空间</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] aux;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 进行归并操作</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a　数组</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> lo　第一部分数组的开始位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> middle　第一部分数组归并的结束位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> hi　第二部分数组归并的结束位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span> lo,<span class="keyword">int</span> middle,<span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = lo;</span><br><span class="line">    <span class="comment">// 第二部分数组归并的开始位置</span></span><br><span class="line">    <span class="keyword">int</span> j = middle +<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将a[lo..hi]的内容复制到aux[lo..hi]</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = lo; k &lt;= hi; k++) &#123;</span><br><span class="line">        aux[k] = a[k];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> z = lo; z &lt;= hi; z++) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(i &gt; middle)&#123;</span><br><span class="line">            a[z] = aux[j++];</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(j &gt; hi)&#123;</span><br><span class="line">            a[z] = aux[i++];</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(aux[i] &gt; aux[j])&#123;</span><br><span class="line">            a[z] = aux[j++];</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            a[z] = aux[i++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>MergeSort算法调用：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] a)</span></span>&#123;</span><br><span class="line">    aux = <span class="keyword">new</span> <span class="keyword">int</span>[a.length];  </span><br><span class="line">    mergeSort(a, <span class="number">0</span>, a.length-<span class="number">1</span>);</span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi )</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lo &gt;= hi)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> middle = (lo + hi)/<span class="number">2</span>;</span><br><span class="line">    <span class="comment">// 对左半边进行排序</span></span><br><span class="line">    mergeSort(a,lo,middle);</span><br><span class="line">    <span class="comment">// 对右半边进行排序</span></span><br><span class="line">    mergeSort(a,middle+<span class="number">1</span>,hi);</span><br><span class="line">    <span class="comment">// 进行归并</span></span><br><span class="line">    merge(a, lo, middle, hi);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>特点：</strong></p><p>归并排序是一种稳定的并且十分高效的排序。在时间复杂度方面，mergeSort的时间复杂度是O(nlogn)【无论是最好还是最坏的情况】，空间复杂度是O(n)。</p><h3 id="基数排序（非比较排序）"><a href="#基数排序（非比较排序）" class="headerlink" title="基数排序（非比较排序）"></a>基数排序（非比较排序）</h3><ol><li><p>实例分析</p><p>基数排序的方式有 LSD (Least sgnificant digital) 和 MSD (Most sgnificant digital)两种方式。LSD 的排序方式由键值的最右边开始，而 MSD 则相反，由键值的最左边开始。 以 LSD 为例</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data = [10 123 732 67 5 918 7 ]</span><br></pre></td></tr></table></figure><p>首先根据个位数的数值，j将数据分配到不同的桶中</p><table><thead><tr><th align="left">编号</th><th align="left">0</th><th align="left">1</th><th align="left">2</th><th align="left">3</th><th align="left">4</th><th align="left">5</th><th align="left">6</th><th align="left">7</th><th align="left">8</th><th align="left">9</th></tr></thead><tbody><tr><td align="left"></td><td align="left">10</td><td align="left"></td><td align="left">732</td><td align="left">123</td><td align="left"></td><td align="left">5</td><td align="left"></td><td align="left">67</td><td align="left">918</td><td align="left"></td></tr><tr><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left">7</td><td align="left"></td><td align="left">99</td></tr></tbody></table><p> 然后，将这些数字按照桶以及桶内部的排序连接起来：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data = [10 732 123 5 67 7 918]</span><br></pre></td></tr></table></figure><p> 接着按照十位的数值，放入不同的桶中（<em>ps:5的十位是0</em>）</p><table><thead><tr><th align="left">编号</th><th align="left">0</th><th align="left">1</th><th align="left">2</th><th align="left">3</th><th align="left">4</th><th align="left">5</th><th align="left">6</th><th align="left">7</th><th align="left">8</th><th align="left">9</th></tr></thead><tbody><tr><td align="left"></td><td align="left">5</td><td align="left">10</td><td align="left">123</td><td align="left">732</td><td align="left"></td><td align="left"></td><td align="left">67</td><td align="left"></td><td align="left">918</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">7</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr></tbody></table><p> 重复连接操作，完成排序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data = [5 7 10 123 732 67 918]</span><br></pre></td></tr></table></figure><p> 最后根据百位的数值，放入不同的桶中（<em>ps:5的十位是0</em>）</p><table><thead><tr><th align="left">编号</th><th align="left">0</th><th align="left">1</th><th align="left">2</th><th align="left">3</th><th align="left">4</th><th align="left">5</th><th align="left">6</th><th align="left">7</th><th align="left">8</th><th align="left">9</th></tr></thead><tbody><tr><td align="left"></td><td align="left">5</td><td align="left">123</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left">732</td><td align="left"></td><td align="left">918</td></tr><tr><td align="left"></td><td align="left">7</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left">10</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left"></td><td align="left">67</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr></tbody></table><p> 最后重复连接操作，完成排序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data = [5 7 10 67 123 732 918]</span><br></pre></td></tr></table></figure><p><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">radixSort</span><span class="params">(<span class="keyword">int</span>[] a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> max = a[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> value : a) &#123;</span><br><span class="line">        <span class="keyword">if</span>(max &lt; value)&#123;</span><br><span class="line">            max = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 找出最大位数N</span></span><br><span class="line">    <span class="keyword">int</span> N = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(max == <span class="number">0</span>)&#123;</span><br><span class="line">        N = <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        N = (<span class="keyword">int</span>) (Math.log10(max) + <span class="number">1</span>);</span><br><span class="line">    &#125;        </span><br><span class="line">    <span class="comment">// 进行基数排序</span></span><br><span class="line">    radixSort(a,N);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基数排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> N 最大位数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">radixSort</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 相当于博客中表格的编号</span></span><br><span class="line">    <span class="keyword">int</span> radix = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> length = a.length;</span><br><span class="line">    <span class="comment">// 代表1，10,100……</span></span><br><span class="line">    <span class="keyword">int</span> factor = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//之所以将二位数组的高度设置为length是为了防止极端情况【即所有数据的最高位数相同】</span></span><br><span class="line">    <span class="keyword">int</span>[][] bucket = <span class="keyword">new</span> <span class="keyword">int</span>[radix][length];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 记录每一个bucket里面有多少个元素</span></span><br><span class="line">    <span class="keyword">int</span>[] order = <span class="keyword">new</span> <span class="keyword">int</span>[radix];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;N;i++,factor *= <span class="number">10</span>)&#123;</span><br><span class="line">        <span class="comment">// 将数据放入桶中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v : a) &#123;</span><br><span class="line">            <span class="keyword">int</span> digit = (v/factor)%<span class="number">10</span>;            </span><br><span class="line"></span><br><span class="line">            bucket[digit][order[digit]] = v;</span><br><span class="line">            order[digit] ++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> position = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 将桶中的数据重新连接放入数组中</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j =<span class="number">0</span>;j&lt;radix;j++ )&#123;</span><br><span class="line">            <span class="comment">// 假如里面有数据</span></span><br><span class="line">            <span class="keyword">if</span>(order[j] != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">// 将数据放入数组中</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; order[j]; k++) &#123;</span><br><span class="line">                    a[position++] = bucket[j][k];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 将计数器置零</span></span><br><span class="line">                order[j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>特点：</strong></p><ol><li>不依赖于数据比较。</li><li>时间复杂度为O(k*n)；空间复杂度为O(n)</li></ol><h3 id="计数排序（非比较排序）"><a href="#计数排序（非比较排序）" class="headerlink" title="计数排序（非比较排序）"></a>计数排序（非比较排序）</h3><p><strong>原理：</strong></p><p>计数排序使用一个额外的数组C，其中C中第i个元素是待排序数组A中值等于i的元素的个数。然后根据数组C来将A中的元素排到正确的位置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计数排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">countSort</span><span class="params">(<span class="keyword">int</span>[] a)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> max = a[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">// 找出最大值</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v : a) &#123;</span><br><span class="line">        <span class="keyword">if</span>(v &gt; max)&#123;</span><br><span class="line">            max = v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 辅助数组</span></span><br><span class="line">    <span class="keyword">int</span>[] count = <span class="keyword">new</span> <span class="keyword">int</span>[max+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将数据的个数储存到count数组中</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> v : a) &#123;</span><br><span class="line">        count[v] ++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> indexArray = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count.length; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span>(count[i] &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            a[indexArray++]=i;</span><br><span class="line">            count[i] --;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，如果数据比较集中的话，我们大可不必创建那么大的数组，我们找出最小和最大的元素，以最小的元素作为基底以减小数组的大小。</p><p><strong>动画演示：</strong></p><p><img src="https://img2018.cnblogs.com/blog/1439869/201907/1439869-20190717181956666-954920412.gif" alt="img"></p><p><strong>特点：</strong></p><ol><li>计数排序是一种稳定的线性时间排序算法。</li><li>时间复杂度为O(n+k)，空间复杂度为O(n+k)</li></ol>]]></content>
    
    <summary type="html">
    
      my blog server
    
    </summary>
    
    
      <category term="技术向" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"/>
    
    
      <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="排序" scheme="http://yoursite.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>Win10 下安装 MySQL 8.0.17</title>
    <link href="http://yoursite.com/2019/10/09/108-MySQLinWindows/"/>
    <id>http://yoursite.com/2019/10/09/108-MySQLinWindows/</id>
    <published>2019-10-09T14:56:37.000Z</published>
    <updated>2019-10-09T15:47:30.960Z</updated>
    
    <content type="html"><![CDATA[<p>写在前面</p><blockquote><p>因为之前装过很多次，均以失败告终，这次一次成功很意外，所以记录一下。</p></blockquote><h2 id="1-下载-amp-安装"><a href="#1-下载-amp-安装" class="headerlink" title="1. 下载&amp;安装"></a>1. 下载&amp;安装</h2><p>下载地址：<a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/mysql/</a></p><p>MySQL 不需要安装，下载 zip 包解压放到指定路径即可。</p><p>如，我的解压路径是：<code>D:\ProjectV\mysql-8.0.17-winx64</code></p><h2 id="2-配置环境变量"><a href="#2-配置环境变量" class="headerlink" title="2. 配置环境变量"></a>2. 配置环境变量</h2><p><strong>首先</strong>新增变量：</p><p>变量名：MYSQL_HOME</p><p>变量值：D:\ProjectV\mysql-8.0.17-winx64</p><p><strong>然后</strong>到path里</p><p>添加：%MYSQL_HOME%\bin;</p><h2 id="3-生成-data-文件"><a href="#3-生成-data-文件" class="headerlink" title="3. 生成 data 文件"></a>3. 生成 data 文件</h2><p><code>以管理员身份</code>运行 cmd，一定要用管理员身份。进入 MySQL 安装目录的下 bin 目录，执行以下命令生成 data 目录。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 进入 bin 目录</span><br><span class="line"><span class="built_in">cd</span> /d D:\ProjectV\mysql-<span class="number">8</span>.<span class="number">0</span>.<span class="number">17</span>-winx64\bin</span><br><span class="line"># 生成 data 目录</span><br><span class="line">mysqld --initialize-insecure --user=mysql</span><br></pre></td></tr></table></figure><h2 id="4-启动服务"><a href="#4-启动服务" class="headerlink" title="4. 启动服务"></a>4. 启动服务</h2><p>执行命令：<code>net start mysql</code> 启动mysql服务，若提示：服务名无效…(后面有解决方法==步骤：5）</p><h2 id="5-解决启动服务失败（报错）"><a href="#5-解决启动服务失败（报错）" class="headerlink" title="5. 解决启动服务失败（报错）"></a>5. 解决启动服务失败（报错）</h2><p>提示：服务名无效</p><p>解决方法：</p><p>执行命令：<code>mysqld -install</code>  即可</p><p>（不需要my.ini配置文件 注意：网上写的很多需要my.ini配置文件，其实不需要my.ini配置文件也可以，我之前放置了my.ini文件，反而提示服务无法启动，把my.ini删除后启动成功了）</p><p>若出现下图，需要去资源管理器中把mysql进程全结束了，重新启动即可。</p><p> <img src="https://images2018.cnblogs.com/blog/1283788/201803/1283788-20180312210208531-2077935748.png" alt="img"></p><h2 id="6-登录mysql"><a href="#6-登录mysql" class="headerlink" title="6. 登录mysql"></a>6. 登录mysql</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line"></span><br><span class="line"># Enter password:</span><br><span class="line"># 这里由于刚安装，所以密码为空，不用输入密码，直接回车即可</span><br></pre></td></tr></table></figure><p><img src="http://m.qpic.cn/psb?/V10z9tn33iz4ON/v6YRmEl8iLImvqOcJB0Mmyou5Lrv6qO8rrXZpg.hQy4!/b/dMMAAAAAAAAA&bo=owL0AAAAAAARB2U!&rf=viewer_4" alt="登录"></p><h2 id="7-查询用户密码"><a href="#7-查询用户密码" class="headerlink" title="7. 查询用户密码"></a>7. 查询用户密码</h2><p>查询用户密码命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select host,user,authentication_string from mysql.user;</span><br></pre></td></tr></table></figure><p> <img src="https://images2018.cnblogs.com/blog/1283788/201803/1283788-20180312210245857-1758917794.png" alt="img"></p><h2 id="8-设置（或修改）root用户密码"><a href="#8-设置（或修改）root用户密码" class="headerlink" title="8. 设置（或修改）root用户密码"></a>8. 设置（或修改）root用户密码</h2><p>设置（或修改）root用户密码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ALTER USER &apos;root&apos;@&apos;localhost&apos; IDENTIFIED WITH mysql_native_password BY &apos;123456&apos;;</span><br><span class="line"># BY 后引号中的内容是密码，自己可以随便设置</span><br><span class="line"></span><br><span class="line">flush privileges; </span><br><span class="line"># 相当于保存，执行此命令后，设置才生效，若不执行，还是之前的密码不变</span><br></pre></td></tr></table></figure><p>Query OK, 0 rows affected (0.01 sec) </p><h2 id="9-退出mysql"><a href="#9-退出mysql" class="headerlink" title="9. 退出mysql"></a>9. 退出mysql</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">quit</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;写在前面&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;因为之前装过很多次，均以失败告终，这次一次成功很意外，所以记录一下。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-下载-amp-安装&quot;&gt;&lt;a href=&quot;#1-下载-amp-安装&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="技术向" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"/>
    
    
      <category term="MySQL" scheme="http://yoursite.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Hello Hexo</title>
    <link href="http://yoursite.com/2019/09/27/100-hello-hexo/"/>
    <id>http://yoursite.com/2019/09/27/100-hello-hexo/</id>
    <published>2019-09-27T14:54:30.000Z</published>
    <updated>2019-09-28T06:51:04.637Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo g# 生成 hexo generate</span><br><span class="line">hexo d# 发布 hexo deploy</span><br><span class="line">hexo s# 启动/重启 hexo server</span><br><span class="line">hexo clean# 清理缓存</span><br></pre></td></tr></table></figure><p>新建文章</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post &lt;文章名&gt;# 文章名无需加 .md</span><br></pre></td></tr></table></figure><p>其中 <code>post</code> 字段共 3 个参数可选</p><table><thead><tr><th>参数</th><th>功能</th><th>路径</th></tr></thead><tbody><tr><td>post</td><td>新建文章</td><td>/source/_posts/</td></tr><tr><td>draft</td><td>新建草稿</td><td>/source/_drafts/</td></tr><tr><td>page</td><td>新建页面（标签页，分类页等）</td><td>/source/</td></tr></tbody></table><h2 id="技术案例"><a href="#技术案例" class="headerlink" title="技术案例"></a>技术案例</h2><p>参考链接：<a href="https://zhih.me/hexo-casper-usage/" target="_blank" rel="noopener">Hexo 主题 casper 使用教程</a></p><p>直接使用原生主题 Casper 会出问题，我也不知道为什么，好像是插件问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
      <category term="技术向" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"/>
    
    
      <category term="网站" scheme="http://yoursite.com/tags/%E7%BD%91%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>命名规则</title>
    <link href="http://yoursite.com/2019/09/27/000-BlogRule/"/>
    <id>http://yoursite.com/2019/09/27/000-BlogRule/</id>
    <published>2019-09-27T06:59:46.000Z</published>
    <updated>2019-09-28T10:03:29.168Z</updated>
    
    <content type="html"><![CDATA[<h2 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h2><ul><li>000 - 建站规约</li><li>100 - 技术向</li><li>200 - 书评向</li><li>300 - 影评向</li><li>400 - 游记向</li><li>500 - 文学向</li><li>600 - 随笔向</li><li>700 - 纪年</li></ul>]]></content>
    
    <summary type="html">
    
      my blog server
    
    </summary>
    
    
      <category term="建站规约" scheme="http://yoursite.com/categories/%E5%BB%BA%E7%AB%99%E8%A7%84%E7%BA%A6/"/>
    
    
      <category term="网站" scheme="http://yoursite.com/tags/%E7%BD%91%E7%AB%99/"/>
    
      <category term="规则" scheme="http://yoursite.com/tags/%E8%A7%84%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>Java-开发常用工具清单</title>
    <link href="http://yoursite.com/2019/09/17/107-Java-%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E6%B8%85%E5%8D%95/"/>
    <id>http://yoursite.com/2019/09/17/107-Java-开发常用工具清单/</id>
    <published>2019-09-17T05:00:58.000Z</published>
    <updated>2019-09-28T10:28:42.768Z</updated>
    
    <content type="html"><![CDATA[<p>工具清单：</p><ul><li>IDE：IDEA、Eclipse</li><li>编辑器：VScode、Notepad++</li><li>数据库：MySQL、Redis、MyBatis</li><li>环境相关：Maven、Tomcat、docker</li><li>数据库工具：NaviCat</li><li>测试检查：JUnit、KW</li><li>版本管理：Git、Gerrit、Github、TortoiseGit</li></ul><p>技术栈（目前接触到的）：</p><ul><li>Java</li><li>Shell</li><li>SQL</li><li>Redis</li><li>MyBatis</li><li>docker</li><li>SpringWMC</li><li>python</li></ul>]]></content>
    
    <summary type="html">
    
      Java 常用 IDE
    
    </summary>
    
    
      <category term="技术向" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="软件" scheme="http://yoursite.com/tags/%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>从迅雷玩客云想到的网速制约因素及一点思考</title>
    <link href="http://yoursite.com/2019/06/30/140-%E4%BB%8E%E8%BF%85%E9%9B%B7%E7%8E%A9%E5%AE%A2%E4%BA%91%E6%83%B3%E5%88%B0%E7%9A%84%E7%BD%91%E9%80%9F%E5%88%B6%E7%BA%A6%E5%9B%A0%E7%B4%A0%E5%8F%8A%E4%B8%80%E7%82%B9%E6%80%9D%E8%80%83/"/>
    <id>http://yoursite.com/2019/06/30/140-从迅雷玩客云想到的网速制约因素及一点思考/</id>
    <published>2019-06-30T04:45:17.000Z</published>
    <updated>2019-09-28T13:00:19.295Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><blockquote><p>最近看到迅雷玩客云的广告，起了组建简易家庭NAS的心思，就下手了。结果使用效果不理想，局域网内看视频卡顿。仔细思考了一下，大概梳理了效果不佳的原因，如有缺漏请指正。</p></blockquote><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>首先画了一张玩客云的设备连接示意图，囊括玩客云的大部分使用场景（除电视）。</p><p><img src="https://raw.githubusercontent.com/yefcion/PicData/master/img/20190629163258.png" alt="网络连接示意图"></p><p>如上图所示，图中黄、绿、蓝三种颜色画出部分代表了制约网速的关键部分，其中路由器是网络的源头。按颜色梳理数据在网络传输中的关键节点。</p><ol><li>黄 - 有线网络：路由器 LAN 口 - 网线 - 电脑网口</li><li>绿 - 无线网络：路由器射频芯片/天线 - 介质（空气+墙） - 手机/平板</li><li>蓝 - 硬盘传输：玩客云USB口 - 数据线 - 硬盘/U盘</li></ol><blockquote><p>注：由于我电脑用的无线网卡，所以「1.网线」情况在本文与「2.」类似</p></blockquote><p>从上面梳理可以看出，传输基本是「发送口-传输介质-接受口」的模式，这样的话很容易进行测试实验。于是通过控制变量法进行了测试，为方便观察把测试结果用 Excel 统计如下。</p><p><img src="https://raw.githubusercontent.com/yefcion/PicData/master/img/20190629180300.png" alt="测试结果统计"></p><blockquote><p>注表中第二行 预测数据，本着同列最低传输速度除以2原则，这是凭经验设置的阈值，没理论依据。</p></blockquote><p>从上表可见，基于外网的测试结果基本还没有达到理论值的10%，预测值的20%。由此可见，很多设备的宣传不可轻信，网络数据传输基本遵循木桶效应，以最低传输速率为上限。再算上设备本身硬件损耗、软件负优化等，实际数据传输速率一般都很低，非常不好看。</p><p>内网（局域网）方面，最意外的是玩客云内部的数据复制测试，一部电影从外接玩客云的USB3.0的U盘里复制到同目录下，竟然才7.5MB/s，震惊了。后来分析了一下大概是因为玩客云设备性能太差，「ARM四核1.5GHz处理器，1GB+8GB内存组合」硬件差，系统肯定也不能跟Win比，所以落了这么个结果。真菜。</p><h2 id="支撑数据"><a href="#支撑数据" class="headerlink" title="支撑数据"></a>支撑数据</h2><p>首先科普一个概念「百兆网络」指100Mbps 即 100Mb/s=12.5MB/s。（因为 1Byte=8bit，读作 1 字节 等于 8 比特（位））</p><p>我们日常说的下载速度、视频缓存速度等，都是MB单位。所以有骂街「百兆网络」从没上「百兆」的同学，你们错怪他了，单位不同。</p><p><strong>路由器型号 TL-WDR5620</strong> [^1]支持 802.11ac，理论 2.4G 最高50MB/s，5G 最高 112.5MB/s</p><p><img src="https://raw.githubusercontent.com/yefcion/PicData/master/img/20190629160725.png" alt></p><p><strong>手机型号 iPhone 6S</strong> [^2]支持 802.11ac，理论 2.4G 最高50MB/s，5G 最高 112.5MB/s</p><p><img src="https://raw.githubusercontent.com/yefcion/PicData/master/img/20190629173900.png" alt></p><p><strong>网线类型 超五类</strong> [^3]传输带宽可高达1000Mb/s，但一般只应用在100Mb/s的网络中</p><p><strong>数据传输</strong> <strong>USB2.0</strong>[^4]的速率是60Mb/s，<strong>USB3.0</strong>[^5]的速率是640Mb/s</p><p><strong>无线网标准协议 802.11</strong></p><p><img src="https://raw.githubusercontent.com/yefcion/PicData/master/img/20190629182157.png" alt></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是这次的测试所得，可收获的知识点包括：<strong>无线网标准协议 802.11、网线类型、USB类型、百兆宽带通俗理解、网络传输顺序、理论与实际落差的思维准备、搭建伪NAS经验、玩客云踩雷</strong>。</p><p>然后说两句 5G，我个人期待没那么高。理论和实践的落差大家应该体验多次，该有一定的甄别和抗干扰能力，非常看不惯一些理由干瘪的 5G 吹。至于目前中兴、华为出的成果确实棒，但大家要理智啊，不要好好的事搞成了捧杀。</p><p>最后放两张百度百科截图。</p><p>（顺便再吐槽下这带的是什么单位 Mbps/s？？？ Mbps不就是 Mb per second么）</p><p><img src="https://raw.githubusercontent.com/yefcion/PicData/master/img/20190629185151.png" alt></p><p><img src="https://raw.githubusercontent.com/yefcion/PicData/master/img/20190629183322.png" alt></p><p>参考资料</p><p>[^1]: 路由器 TL-WDR5620 参数 <a href="http://detail.zol.com.cn/1162/1161644/param.shtml" target="_blank" rel="noopener">http://detail.zol.com.cn/1162/1161644/param.shtml</a><br>[^2]: 手机 iPhone 6s 参数 <a href="http://detail.zol.com.cn/369/368535/param.shtml" target="_blank" rel="noopener">http://detail.zol.com.cn/369/368535/param.shtml</a><br>[^3]: 网线类别 <a href="https://zhidao.baidu.com/question/464102059.html" target="_blank" rel="noopener">https://zhidao.baidu.com/question/464102059.html</a><br>[^4]: USB2.0 <a href="https://baike.baidu.com/item/USB%202.0?fromtitle=usb2.0&amp;fromid=8402158" target="_blank" rel="noopener">https://baike.baidu.com/item/USB%202.0?fromtitle=usb2.0&amp;fromid=8402158</a><br>[^5]: USB3.0 <a href="https://baike.baidu.com/item/USB%203.0?fromtitle=USB3.0&amp;fromid=8640396#2_1" target="_blank" rel="noopener">https://baike.baidu.com/item/USB%203.0?fromtitle=USB3.0&amp;fromid=8640396#2_1</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;最近看到迅雷玩客云的广告，起了组建简易家庭NAS的心思，就下手了。结果使用效果不理想，局域网内看视
      
    
    </summary>
    
    
      <category term="技术向" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"/>
    
    
      <category term="网络" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="硬件" scheme="http://yoursite.com/tags/%E7%A1%AC%E4%BB%B6/"/>
    
      <category term="玩客云" scheme="http://yoursite.com/tags/%E7%8E%A9%E5%AE%A2%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>河海大学摄影指南</title>
    <link href="http://yoursite.com/2019/06/03/404-%E6%B2%B3%E6%B5%B7%E5%A4%A7%E5%AD%A6%E6%91%84%E5%BD%B1%E6%8C%87%E5%8D%97/"/>
    <id>http://yoursite.com/2019/06/03/404-河海大学摄影指南/</id>
    <published>2019-06-03T04:45:17.000Z</published>
    <updated>2019-09-28T07:58:12.352Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>写在前面</p><p>因为要拍毕业照，所以把准备过程记录一下，方便以后回忆。或者帮其他人提供参考资料。</p><p>注：此处河海大学特指江宁校区，本部和常州校区之后可能会补充。</p></blockquote><p>直接放干货，这是我踩点整个校园之后，按场景分类排出的河海拍照思维导图。</p><p><img src="https://raw.githubusercontent.com/yefcion/PicData/master/img/20198.png" alt="pic1.河海摄影场景分类"></p><p>如图所示，具体场景为 10 个，最后 1 个路为随处可见的场景。</p><p>具体拍摄路线可参考下图。</p><p><img src="https://raw.githubusercontent.com/yefcion/PicData/master/img/20190528224021.png" alt="pic2.拍摄路线"></p><p>按照上次拍照经验，1 点开拍，拍了 1、2、3、4、8、9 这 6 个点，所以一天的话是能拍完全部场景的。下面逐场景分析。</p><h3 id="01、校门草坪"><a href="#01、校门草坪" class="headerlink" title="01、校门草坪"></a>01、校门草坪</h3><ul><li><p>场景 校名、图书馆背景</p></li><li><p>着装 学位服、便装</p></li><li><p>姿势 标准姿势<a href="在开阔环境中，四人不使用道具可以摆出的姿势">^1</a></p></li></ul><h3 id="02、图书馆内"><a href="#02、图书馆内" class="headerlink" title="02、图书馆内"></a>02、图书馆内</h3><ul><li>场景<ul><li>一层 环形楼梯背景、俯拍</li><li>二层 西侧黄色格栅、灰色墙面、楼梯</li></ul></li><li>着装 便装</li><li>姿势 标准姿势、楼梯姿势<a href="楼梯场景有长腿效果">^2</a>、俯拍姿势<a href="摄影者从上往下拍，适合形状摆拍">^3</a></li><li>道具 书</li></ul><h3 id="03、小浪底"><a href="#03、小浪底" class="headerlink" title="03、小浪底"></a>03、小浪底</h3><ul><li><p>场景 </p><ul><li>石凳</li><li>水池、池岸</li><li>音乐台</li></ul></li><li><p>着装 学位服、便装</p></li><li><p>姿势 标准姿势、楼梯姿势、水岸姿势<a href="水边，可拍摄倒影">^4</a></p></li></ul><h3 id="04、致用楼"><a href="#04、致用楼" class="headerlink" title="04、致用楼"></a>04、致用楼</h3><ul><li>场景<ul><li>一楼 中间楼梯</li><li>二楼 阶梯教室、圆形拱门</li><li>三楼 走廊、普通教室（黑板、座位）</li></ul></li><li>着装 学位服、便装</li><li>姿势 标准姿势、黑板写画<a href="在黑板上写写画画，可事先准备内容">^5</a>、学习交流<a href="摄影对象间以学习为主的亲密互动">^6</a></li><li>道具 书</li></ul><h3 id="05、叠翠山"><a href="#05、叠翠山" class="headerlink" title="05、叠翠山"></a>05、叠翠山</h3><ul><li>场景 凉棚、草坪、蓝天</li><li>着装 便装</li><li>姿势 标准姿势</li></ul><h3 id="06、七食堂、思源楼"><a href="#06、七食堂、思源楼" class="headerlink" title="06、七食堂、思源楼"></a>06、七食堂、思源楼</h3><ul><li>场景 楼梯、双层楼梯</li><li>着装 便装</li><li>姿势 标准姿势</li></ul><h3 id="07、东湖"><a href="#07、东湖" class="headerlink" title="07、东湖"></a>07、东湖</h3><ul><li>场景<ul><li>桥</li><li>桥北</li><li>桥南楼上</li></ul></li><li>着装 便装</li><li>姿势 标准姿势、名作模仿<a href="事先选好要模仿的海报/插画/名画等">^7</a></li></ul><h3 id="08、操场"><a href="#08、操场" class="headerlink" title="08、操场"></a>08、操场</h3><ul><li>场景<ul><li>座位、楼梯</li><li>跑道</li><li>草坪</li><li>球网</li></ul></li><li>着装 学位服、便装</li><li>姿势 标准姿势、操场相关<a href="在操场这种颜色鲜艳、空间较大环境中的姿势">^8</a></li></ul><h3 id="09、勤学楼"><a href="#09、勤学楼" class="headerlink" title="09、勤学楼"></a>09、勤学楼</h3><ul><li>场景 天台</li><li>着装 学位服、便装</li><li>姿势 背影姿势<a href="以天空等为背景，适合背影、手势">^9</a></li></ul><h3 id="10、商院楼梯"><a href="#10、商院楼梯" class="headerlink" title="10、商院楼梯"></a>10、商院楼梯</h3><ul><li>场景 红色旋转楼梯</li><li>着装 学位服、便装</li><li>姿势 楼梯姿势</li></ul><p>综上，主要拍照姿势暂时9种，主要就是标准姿势<a href="在开阔环境中，四人不使用道具可以摆出的姿势">^1</a>，这个自己设定的空间很大，请务必自己想想有哪些想拍的姿势。其他的如名作模仿，需要选好自己想要的模仿对象。</p><p>按场景分类的姿势参考<a href="https://www.jianguoyun.com/p/DfExcm8QipPtBRjdt8gB" target="_blank" rel="noopener">链接</a>。</p>]]></content>
    
    <summary type="html">
    
      河海大学拍摄指南
    
    </summary>
    
    
      <category term="游记向" scheme="http://yoursite.com/categories/%E6%B8%B8%E8%AE%B0%E5%90%91/"/>
    
    
      <category term="河海大学" scheme="http://yoursite.com/tags/%E6%B2%B3%E6%B5%B7%E5%A4%A7%E5%AD%A6/"/>
    
      <category term="摄影" scheme="http://yoursite.com/tags/%E6%91%84%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>bat 批量移动文件到新文件夹</title>
    <link href="http://yoursite.com/2019/04/23/106-%E6%89%B9%E5%A4%84%E7%90%86-%E6%89%B9%E9%87%8F%E7%A7%BB%E5%8A%A8%E6%96%87%E4%BB%B6%E5%88%B0%E6%96%B0%E6%96%87%E4%BB%B6%E5%A4%B9/"/>
    <id>http://yoursite.com/2019/04/23/106-批处理-批量移动文件到新文件夹/</id>
    <published>2019-04-23T04:45:17.000Z</published>
    <updated>2019-09-28T07:43:54.759Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0-命令说明"><a href="#0-命令说明" class="headerlink" title="0 命令说明"></a>0 命令说明</h3><p>移动文件 的batch命令格式是：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">move [文件名] [文件夹名]</span><br><span class="line">::例</span><br><span class="line">move [pic.jpg] [新建文件夹]</span><br></pre></td></tr></table></figure><h3 id="1-利用excel写批处理命令"><a href="#1-利用excel写批处理命令" class="headerlink" title="1 利用excel写批处理命令"></a>1 利用excel写批处理命令</h3><p>因此批量移动有规律的数字文件可以如下操作，以90001张图片（命名为0-90000.jpg）为例：</p><blockquote><p>有90001张图片，每隔25张移动一张到 <code>筛选</code> 文件夹</p></blockquote><p>在Excel表格中输入如下数据，第1、3列输入文字后直接拉取，第2列数字间隔25向下拉取</p><table><thead><tr><th>move</th><th><strong>0.jpg</strong></th><th><strong>筛选</strong></th></tr></thead><tbody><tr><td>move</td><td>25.jpg</td><td>筛选</td></tr><tr><td>move</td><td>50.jpg</td><td>筛选</td></tr><tr><td>move</td><td>75.jpg</td><td>筛选</td></tr><tr><td>…</td><td>… +25</td><td>…</td></tr><tr><td>move</td><td>90000.jpg</td><td>筛选</td></tr></tbody></table><h3 id="2-命令写入bat"><a href="#2-命令写入bat" class="headerlink" title="2 命令写入bat"></a>2 命令写入bat</h3><p>Excel中 <strong>ctrl + A</strong> 选中所有数据复制，到桌面（或其他地方）新建 <strong>move.txt</strong> 文件，打开后 将Excel中复制的数据粘贴进该 move.txt 文件，得到如下格式的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">move0.jpg筛选</span><br><span class="line">move25.jpg筛选</span><br><span class="line">move50.jpg筛选</span><br><span class="line">move75.jpg筛选</span><br><span class="line">move100.jpg筛选</span><br><span class="line">move125.jpg筛选</span><br></pre></td></tr></table></figure><p>保存 move.txt 文件后重命名，将txt文件后缀改为bat，即 <code>move.bat</code> 。</p><h3 id="3-运行-bat-文件"><a href="#3-运行-bat-文件" class="headerlink" title="3 运行 bat 文件"></a>3 运行 bat 文件</h3><p>双击 move.bat 开始批处理移动操作。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;0-命令说明&quot;&gt;&lt;a href=&quot;#0-命令说明&quot; class=&quot;headerlink&quot; title=&quot;0 命令说明&quot;&gt;&lt;/a&gt;0 命令说明&lt;/h3&gt;&lt;p&gt;移动文件 的batch命令格式是：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table
      
    
    </summary>
    
    
      <category term="技术向" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"/>
    
    
      <category term="bat" scheme="http://yoursite.com/tags/bat/"/>
    
      <category term="Excel" scheme="http://yoursite.com/tags/Excel/"/>
    
  </entry>
  
  <entry>
    <title>VPS-用搬瓦工（Bandwagon）搭建VPS实现科学上网</title>
    <link href="http://yoursite.com/2019/04/12/105-VPS-%E7%94%A8%E6%90%AC%E7%93%A6%E5%B7%A5%EF%BC%88Bandwagon%EF%BC%89%E6%90%AD%E5%BB%BAVPS%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    <id>http://yoursite.com/2019/04/12/105-VPS-用搬瓦工（Bandwagon）搭建VPS实现科学上网/</id>
    <published>2019-04-12T05:00:58.000Z</published>
    <updated>2019-09-28T13:10:38.913Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><ol><li>FQ是为了学习交流、使用工具</li><li>以国为荣，不惹事端<h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3>网面上所有hosts（以<a href="https://laod.cn/hosts/2017-google-hosts.html" target="_blank" rel="noopener">老D博客</a>为例）不能用，各种VPN被封，导致我所使用的Google系列产品无法使用。最近看到一个朋友的技术贴，觉得FQ这种技术活掌握在手里也挺好，所以我也开始尝试了。<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3>这项活动不难，<code>按部就班</code>即可完成。当然，我的做法可能比较小白，无法发掘VPS全部功能，但是就我的初衷<code>顺利FQ</code>而言，完美稳定。<br>简单介绍一下梗概：</li><li>购买搬瓦工（Bandwagon）VPS</li><li>配置VPS</li><li>配置终端，PC/Android/IOS客户端</li><li>科学上网</li></ol><h3 id="1-购买VPS"><a href="#1-购买VPS" class="headerlink" title="1. 购买VPS"></a>1. 购买VPS</h3><pre><code>- 知名VPS服务商有：Bandwagon、Vultr 、 Linode。- 我使用Bandwagon，原因很简单：便宜，可支付宝。- KVM、$25.99 USD包年、USCA_2- 可以几个人合买哦，因为配置完之后理论上是没有使用人数限制的，只不过就像宽带一样，人多了速度自然就会慢了</code></pre><p>1.1 访问<a href="https://bwh1.net/index.php" target="_blank" rel="noopener">搬瓦工</a>网址<br><img src="http://upload-images.jianshu.io/upload_images/152050-448ccca37257ccf6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="2017-12-01-13-49-45.jpg"></p><p>1.2 选择套餐，加入购物车：<br>本着价格优先和稳定够用的原则，我选了第二便宜的套餐（最便宜的套餐常年断货）<br>至于<code>KVM</code>还是<code>OVZ</code>，推荐KVM，这是一番比较之后的结果。看过的文章忘记保存，以后有机会的话放网址。<br>之后是套餐内容：<br><img src="http://upload-images.jianshu.io/upload_images/152050-ceeda80f2fc999a5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="2017-12-01-13-50-52.jpg"></p><p>选择时长和服务器位置：包月、包年；洛杉矶、加拿大、日本等<br>我选择了<code>包年</code>、<code>洛杉矶_2</code></p><p>1.3 确认订单与付款<br><img src="http://upload-images.jianshu.io/upload_images/152050-7940554988367f0b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="搬瓦工主页"><br>这里可以填优惠码，用了会打折扣（和国内软件邀请机制一样，双方都有优惠），然后checkout<br>如果是新用户的话需要注册，要填的信息如下：姓名、邮件、地址、电话。这里可以选择支付宝(Alipay)付款，最后complete order完成。<br><img src="http://upload-images.jianshu.io/upload_images/152050-069211d54d513c03.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="2017-12-01-14-04-47.jpg"></p><p>购买成功后，邮箱收到三封邮件，里面有重要信息（SSH port、VPS IP、root 临时密码）需要记录。之后有用。<br>以上VPS的购买完成，下面进入配置。</p><h3 id="2-配置VPS"><a href="#2-配置VPS" class="headerlink" title="2. 配置VPS"></a>2. 配置VPS</h3><p>2.1 返回home，进入client area，找到service，<code>my services</code>,进入<code>KiwiVM</code>控制面板<br><img src="http://upload-images.jianshu.io/upload_images/152050-20cd309768f31124.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="2017-12-01-13-55-19.jpg"></p><p><img src="http://upload-images.jianshu.io/upload_images/152050-2089379a849ea0da.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="2017-12-01-14-09-36.jpg"></p><p><img src="http://upload-images.jianshu.io/upload_images/152050-d6f03a2f0ad69183.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="2017-12-01-14-11-46.jpg"></p><p>2.2 配置KiwiVM(核心在这里)<br>    面板中要用到的面板选项下图标出：<br><img src="http://upload-images.jianshu.io/upload_images/152050-9613cb6d0a43fc5d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="2017-12-01-14-13-33.jpg"></p><pre><code>- main controls(主控中心)- install OS(安装系统)- root password modification(根密码修改)- KiwiVM password modification(KiwiVM密码修改)- Shadowsocks serve(Shadowsocks服务)- ShadowsocksR serve(ShadowsocksR服务)</code></pre><p>首先，可以修改用户名，这个就是个人喜好的问题，可以不改，之后配置没什么用。（ <del>但如果你用 putty 的话，这个就是登陆的名字，由于这个教程面向我这种小白用户，所以这段话可以忽略</del>）<br><img src="http://upload-images.jianshu.io/upload_images/152050-3119906b81068f92.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="2017-12-01-14-29-50.jpg"></p><p>重装服务器系统。这里本来是默认装了CentOS的系统，但是清洁起见还是重装一下。<br>Main controls面板，单击Stop，然后Install new OS 这里，选择 CentOS-6-x86_64-bbr，勾选 I agree， 点击 Reload。然后看密码，或者修改。</p><pre><code>• Root password modification 这个是装系统之后，搬瓦工随机分配的密码，自己不能修改，`记录这里的信息`（邮箱里也会收到） • KiwiVM password modification 是登陆账号的密码，直接写新密码。这样的话最开始邮件收到的密码就可以不用了。从这步开始购买VPS时的邮件内容就不用了。</code></pre><p>常理的话控制面板应该如下，有ShadowsocksR Server和Shadowsocks serve，但是新装的服务器好像没了，因此要手动安装<br><img src="http://pb8ci5khn.bkt.clouddn.com/blog/20181201/wMC1ERhfiqAm.png" alt="mark"></p><p>安装 ShadowsocksR Server和Shadowsocks serve<br>直接点击<a href="https://kiwivm.64clouds.com/main-exec.php?mode=extras_shadowsocks" target="_blank" rel="noopener">链接</a>，快速啊安装shadowsocks服务<br>安装完成之后记录当前界面显示的消息，用客户端FQ就<code>靠这些信息</code>了。（另，保存该网址为书签，不知为什么安装shadowsocks后KiviVM面板上没有添加shadowsocks的菜单，所以为了以后方便查看，把这个网址保存书签把）<br>IP是首页’Main statistic’中的 ‘IP address’<br><img src="http://upload-images.jianshu.io/upload_images/152050-4411d763294d3c54.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="2017-12-01-14-43-52.jpg"><br>以上VPS配置工作就完成了，只要在终端登录就可以实现科学上网了</p><h3 id="3-配置终端"><a href="#3-配置终端" class="headerlink" title="3. 配置终端"></a>3. 配置终端</h3><p>客户端下载，点击关键词即可下载。</p><ul><li>PC<br>  <a href="https://cache.cdn.bydisk.com/ShadowsocksR-4.7.0-win.7z" target="_blank" rel="noopener">SSR-4.7.0</a></li><li>IOS<br>  <a href="https://itunes.apple.com/us/app/wingy-http-s-socks5-proxy-utility/id1178584911" target="_blank" rel="noopener">Wingy</a><br>  <a href="https://itunes.apple.com/us/app/shadowrocket/id932747118" target="_blank" rel="noopener">shadowrocket</a></li><li>Android<br>  <a href="https://qiniucloud.download.storage.bydisk.com/ssr-3.4.0.5.apk" target="_blank" rel="noopener">SSR-3.4.0.5</a></li><li>MAC<br>  <a href="https://github.com/qinyuhang/ShadowsocksX-NG-R/releases" target="_blank" rel="noopener">ShadowrocksX-NG-R</a><br>  <a href="https://github.com/erguotou520/electron-ssr/releases" target="_blank" rel="noopener">electron-ssr</a></li></ul><p>配置案例：</p><ol><li><p>以win为例：<br>把ShadowsocksR Server的信息填到客户端，完成单击确定即可。<br><img src="http://upload-images.jianshu.io/upload_images/152050-82f31cec772d6186.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="2017-12-01-14-58-39.jpg"></p></li><li><p>以IOS客户端Wing为例：<br>把ShadowsocksR Server的信息填到客户端，完成单击确定即可。<br><img src="http://upload-images.jianshu.io/upload_images/152050-06845dd196adc0e7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="2017-12-01-15-03-56.jpg"></p></li></ol><p>测试网页：<br><a href="www.google.com.hk/?hl=zh-cn">Google</a><br><a href="https://www.facebook.com/" target="_blank" rel="noopener">Facebook</a></p><p>愉快上网。</p><p><img src="http://m.qpic.cn/psb?/V10z9tn33iz4ON/C6K2XHPp5GsV0.nsYSfLEHvXAnU*9orxloyoKmkv56c!/b/dL8AAAAAAAAA&bo=1QS5AgAAAAARB1o!&rf=viewer_4" alt="Google"></p>]]></content>
    
    <summary type="html">
    
      关于如何上网
    
    </summary>
    
    
      <category term="技术向" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"/>
    
    
      <category term="Bandwagon" scheme="http://yoursite.com/tags/Bandwagon/"/>
    
      <category term="VPS" scheme="http://yoursite.com/tags/VPS/"/>
    
      <category term="网络" scheme="http://yoursite.com/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>无声的告白译本对比</title>
    <link href="http://yoursite.com/2019/04/04/205-%E6%97%A0%E5%A3%B0%E7%9A%84%E5%91%8A%E7%99%BD%E8%AF%91%E6%9C%AC%E5%AF%B9%E6%AF%94/"/>
    <id>http://yoursite.com/2019/04/04/205-无声的告白译本对比/</id>
    <published>2019-04-04T15:56:17.000Z</published>
    <updated>2019-10-14T15:34:34.983Z</updated>
    
    <content type="html"><![CDATA[<p>本文共<code>十一个</code>对比，原文+译文。资料来自豆瓣一个书评，<a href="[https://book.douban.com/review/9720804/](https://book.douban.com/review/9720804/)">译文链接</a>。</p><p>声明：本文只代表我的个人观点，可以点上面链接看无评论版译文对比。</p><p><img src="https://upload-images.jianshu.io/upload_images/152050-35522a4e09505c65.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="一"><br>个人译本：</p><blockquote><p>对此法国人有一种说法：说一声再见，就会死去一点。那帮混蛋法国人对什么都有说法，但他们往往都是对的。</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/152050-380685024d8dbe12.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="二"><br>个人译本：</p><blockquote><p>别了，朋友。我不会说再见。在说它仍有意义时，在它悲伤、孤独、决绝时，我已经说过了。</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/152050-f0d24b12285fe50d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="三"><br>个人译本：</p><blockquote><p>就在这时，一个梦幻般女子走了进来。那一瞬间，我觉得酒吧里没有了任何声音，时代精英不再唇枪舌剑，高脚凳上的醉汉停下了滔滔不绝，仿佛指挥家轻敲乐谱后，双手停在半空中，悬而未发。</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/152050-12ac0e00bff63748.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="四"><br>个人译本：</p><blockquote><p>姚译很好</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/152050-434cfe6c40dcd912.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="五"><br>个人译本：</p><blockquote><p>我性格软弱，没胆识也没雄心。我抓住了一只黄铜戒指紧紧不放，结果却惊讶地发现它并不是黄金。我这种人一生中只有一个高光时刻，那就像是在高高秋千上的完美一荡。此后余生所追求的，不过是尽量不从人行道跌进水沟罢了。</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/152050-bd33ca6611dafa30.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="六"><br>个人译本：</p><blockquote><p>你丈夫是个能够严格审视自我，认清自我的男人，这种禀赋并不多见。大多数人终其一生，不过是用半数精力去维护他们从未有过的尊严。</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/152050-0c55c8bedf034931.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="七"><br>个人译本：</p><blockquote><p>卢译很好</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/152050-29f5601d5691114b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="八"><br>个人译本：</p><blockquote><p>一座相较而言并不特别糟糕的城市，它是富裕、繁荣、充满骄傲，还是失落、破败、充满空虚，完全取决于你，取决于你在其中的地位和你的个人成就。我没有。我不在乎。</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/152050-750d9123b8e27c59.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="九"><br>个人译本：</p><blockquote><p>姚译很好</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/152050-76702b96dfafd926.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="十"><br>个人译本：</p><blockquote><p>我打起精神。我刚才一直歪歪扭扭地站在这儿，张着嘴呼吸，活像个女学生。她确实是个尤物。在近处看，她让我几乎无法动弹。【这个翻的比较烂】</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/152050-6fc899ca53213b81.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="十一"><br>个人译本：</p><blockquote><p>你没胆量，没脑子，没门路，没见识，只能摆摆不值钱的态度，却还指望别人为你哭泣。</p></blockquote><p>最终结果对比如下图所示。<br><img src="https://upload-images.jianshu.io/upload_images/152050-c1a7061c95177a73.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="评分图"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">分值评分标准</span><br><span class="line"> 5   完美</span><br><span class="line"> 4     贴切</span><br><span class="line"> 3   有病词</span><br><span class="line"> 2   有病句</span><br><span class="line"> 1   垃圾</span><br></pre></td></tr></table></figure><p>均分：<br>译文版（宋佥   译） 3.6<br>读客版（姚向辉译） 3.5<br>南海版（卢肖慧译） 3.3<br>新星版（宋碧云译） 2.5</p><p>综合评价：<br>宋佥 译本能最准确地还原作者意思。虽然有点累赘、缺乏金句，但表意做的最好。个人首选宋译本。<br>姚向辉 译本表意有时不准，但句子简明扼要，行文像作者风格。<br>卢肖慧 译本不稳定，有时能译出很好地句子（超越其他三人），但大多数时候不行。<br>宋碧云 译本看了脑壳痛。</p>]]></content>
    
    <summary type="html">
    
      无声的告白
    
    </summary>
    
    
      <category term="书影向" scheme="http://yoursite.com/categories/%E4%B9%A6%E5%BD%B1%E5%90%91/"/>
    
    
      <category term="书籍" scheme="http://yoursite.com/tags/%E4%B9%A6%E7%B1%8D/"/>
    
      <category term="译本" scheme="http://yoursite.com/tags/%E8%AF%91%E6%9C%AC/"/>
    
      <category term="English" scheme="http://yoursite.com/tags/English/"/>
    
  </entry>
  
  <entry>
    <title>PicGo + GitHub 搭建个人图床工具</title>
    <link href="http://yoursite.com/2019/03/11/104-PicGo/"/>
    <id>http://yoursite.com/2019/03/11/104-PicGo/</id>
    <published>2019-03-11T14:56:37.000Z</published>
    <updated>2019-10-09T11:09:00.069Z</updated>
    
    <content type="html"><![CDATA[<p>使用 GitHhub 搭建的图床，满足个人用户绝大部分需求。方便程度：★★★★☆  配置难度：★★☆☆☆</p><a id="more"></a><p>写在前面</p><blockquote><p>我以前用的 <code>七牛云 + Mpic</code> 的组合，后来由于七牛云测试域名收回，我的图床就废了。以前的好多图片都埋藏在七牛云的服务器上，又气又难过。思考好一段时间，想自己搭服务，但成本有点高，备案的域名 + 服务器一年几百块。对于我这种不靠写字谋生的人而言没有必要，所以就停摆了一段时间。直到今天用 GitHub 搭起了图床，可以说非常开心了。所以跟大家分享一下。</p></blockquote><ul><li>方便程度：★★★★☆</li><li>配置难度：★★☆☆☆</li><li>适用环境：win + mac + linux</li><li>需要工具：GitHub 账号 + PicGo 客户端</li><li>稳定性：背靠 GitHub 和微软，比自建服务器都稳</li><li>隐私性：这算是唯一缺点，你的图片别人可以访问</li></ul><h2 id="1-GitHub-仓库设置"><a href="#1-GitHub-仓库设置" class="headerlink" title="1. GitHub 仓库设置"></a>1. GitHub 仓库设置</h2><blockquote><p>流程：新建 public 仓库 -&gt; 创建 token -&gt; 复制 token 备用</p></blockquote><h3 id="1-1-新建仓库"><a href="#1-1-新建仓库" class="headerlink" title="1.1 新建仓库"></a>1.1 新建仓库</h3><p>点击 git 主页右上角的 <code>+</code> 创建 <code>New repository</code>；</p><p><img src="https://raw.githubusercontent.com/yefcion/PicData/master/img/20190311222018.png" alt></p><p>填写仓库信息，例如我就创建了一个 <code>cloudimg</code> 的仓库。这里注意，仓库得设置为  <code>Public</code> 因为后面通过客户端访问算是外部访问，因此无法访问  <code>Private</code> ，这样的话图片传上来之后只能存储不能显示。所以要设置为 <code>Public</code>。</p><p><img src="https://raw.githubusercontent.com/yefcion/PicData/master/img/20190311222514.png" alt></p><h3 id="1-2-创建-token-并复制保存"><a href="#1-2-创建-token-并复制保存" class="headerlink" title="1.2 创建 token 并复制保存"></a>1.2 创建 token 并复制保存</h3><p>此时仓库已经建立，点击右上角头像，然后进入设置；</p><p><img src="https://raw.githubusercontent.com/yefcion/PicData/master/img/20190311222925.png" alt></p><p>在页面最下找到 <code>Developer settings</code>，点击进入；</p><p><img src="https://raw.githubusercontent.com/yefcion/PicData/master/img/1552314691232.png" alt></p><p>创建 token；</p><p><img src="https://raw.githubusercontent.com/yefcion/PicData/master/img/20190311223317.png" alt><br>填 description（也是随心填），勾选复选框 repo ，接着到页面底部 <code>Generate token</code> 就完成了；</p><p><img src="https://raw.githubusercontent.com/yefcion/PicData/master/img/1552314907794.png" alt></p><p>然后复制生成一串字符 token，这个 token 只出现一次，所以要保存一下（我一般记在微信收藏）。</p><p><img src="https://raw.githubusercontent.com/yefcion/PicData/master/img/20190311223901.png" alt></p><h2 id="2-PicGo-客户端配置"><a href="#2-PicGo-客户端配置" class="headerlink" title="2. PicGo 客户端配置"></a>2. PicGo 客户端配置</h2><h3 id="2-1-下载-amp-安装"><a href="#2-1-下载-amp-安装" class="headerlink" title="2.1 下载&amp;安装"></a>2.1 下载&amp;安装</h3><p>PicGo （目前 2.0.4）是一个开源的图床工具，非常优秀。可以到 git 上下载，但下载速度太慢，所以我放了一个百度云的链接，速度快很多。</p><p>git地址：<a href="https://github.com/Molunerfinn/PicGo" target="_blank" rel="noopener">PicGo</a></p><p>Win版下载链接：<a href="https://pan.baidu.com/s/17KycPMoqNCnc1cR_yQO8nQ" target="_blank" rel="noopener">百度云</a> 密码：PicG</p><h3 id="2-2-配置"><a href="#2-2-配置" class="headerlink" title="2.2 配置"></a>2.2 配置</h3><p>先上图</p><p><img src="https://raw.githubusercontent.com/yefcion/PicData/master/img/20190311224443.png" alt></p><ul><li>用户名 即你的用户名 如我的 <code>yefcion</code></li><li>仓库名 即你的仓库名 如我的 <code>PicData</code></li><li>分支名 默认 <code>master</code>  </li><li>Token 就是刚刚复制的那一串字符</li><li>存储路径 这个可以填也可以不填，填了的话图片就上传到 git 中 <code>data</code>  这个文件夹</li><li>域名 <code>https://raw.githubusercontent.com/yefcion/PicData/master</code>这个要改一下 格式 <code>https://raw.githubusercontent.com/[用户名]/[仓库名]/master</code></li></ul><p>然后点确定就可以了。</p><p>然后关于上传的快捷键设置。默认的是 Mac 按键，推荐改成 <code>Ctrl + alt +c</code>。</p><p><img src="https://raw.githubusercontent.com/yefcion/PicData/master/img/20190311224935.png" alt></p><p>综上，操作完成。</p><p>本方案唯一缺点，不能私人。但是考虑到 GitHub 上传的图在列表里没法预览，应该没人会闲着没事翻记录。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 GitHhub 搭建的图床，满足个人用户绝大部分需求。方便程度：★★★★☆  配置难度：★★☆☆☆&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术向" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"/>
    
    
      <category term="图床" scheme="http://yoursite.com/tags/%E5%9B%BE%E5%BA%8A/"/>
    
      <category term="Blog" scheme="http://yoursite.com/tags/Blog/"/>
    
      <category term="GitHub" scheme="http://yoursite.com/tags/GitHub/"/>
    
      <category term="PicGo" scheme="http://yoursite.com/tags/PicGo/"/>
    
  </entry>
  
  <entry>
    <title>18_年记</title>
    <link href="http://yoursite.com/2018/12/31/707-18-%E5%B9%B4%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/12/31/707-18-年记/</id>
    <published>2018-12-31T05:00:58.000Z</published>
    <updated>2019-09-28T10:26:09.547Z</updated>
    
    <content type="html"><![CDATA[<p><strong>娱乐：</strong></p><ul><li>读书 - 61本</li><li>影视 - 160 部 </li><li>摄影 - 每日一记 </li><li>出行 - 南京、上海、苏锡常、杭州 </li><li>线下 - 戏曲、话剧、演唱会、音乐节</li></ul><p><strong>推荐：</strong></p><ul><li>影 - 花样年华、重庆森林、方形</li><li>剧 - 请回答 1988、逃避虽可耻但有用</li><li>书 - 红楼梦、倚天屠龙记、长恨歌、北鸢、雪中悍刀行</li></ul><p>工作 - To be a ZTEr</p><p>学习 - 实验完成，待写论文</p><p>读书统计</p><p><img src="http://a3.qpic.cn/psb?/6ee074a0-6b62-4061-a4b1-8a668bfe6415/MQ76eg*QcGqDX1st9*nceTtS6lOpN.cZK6ybgwnYKBk!/b/dN4AAAAAAAAA&ek=1&kp=1&pt=0&tl=3&su=051176097&tm=1569643200&sce=0-12-12&rf=2-9" alt="读书统计"></p><p>观影统计</p><p><img src="http://a1.qpic.cn/psb?/6ee074a0-6b62-4061-a4b1-8a668bfe6415/FEeThGXEM05o0vIblqyriQqqE3s*dNg6xLLv7N3KFpM!/b/dIgBAAAAAAAA&ek=1&kp=1&pt=0&tl=3&su=094417553&tm=1569643200&sce=0-12-12&rf=2-9" alt="观影统计"></p><p>每日一记 365 日</p><p><img src="http://a2.qpic.cn/psb?/6ee074a0-6b62-4061-a4b1-8a668bfe6415/Fg0dHP4hmkbVAA2jxXyWGbEG*WlOsNNvFcTeDvi9gYE!/b/dA0BAAAAAAAA&ek=1&kp=1&pt=0&tl=3&su=028768833&tm=1569643200&sce=0-12-12&rf=2-9" alt="每日一记"></p><p>情绪曲线</p><p><img src="http://a4.qpic.cn/psb?/6ee074a0-6b62-4061-a4b1-8a668bfe6415/FxOW7lJlZbHsNLxtI7iJHA5lssGpgpwpoXHnsYRql4M!/b/dAsAAAAAAAAA&ek=1&kp=1&pt=0&tl=3&su=064824353&tm=1569643200&sce=0-12-12&rf=2-9" alt="情绪曲线"></p><blockquote><p>待你们从学校毕业，地上的瓜分之事自会找上门来，纵使厌恶也必须接受。你们会成为商人，成为编辑，成为官员。但在神的宝座上与神并肩而坐这种事，走过学生时代便不会再有，错过后便永远不再来。</p></blockquote>]]></content>
    
    <summary type="html">
    
      我的 2018 统计
    
    </summary>
    
    
      <category term="纪年" scheme="http://yoursite.com/categories/%E7%BA%AA%E5%B9%B4/"/>
    
    
      <category term="研究生" scheme="http://yoursite.com/tags/%E7%A0%94%E7%A9%B6%E7%94%9F/"/>
    
      <category term="统计" scheme="http://yoursite.com/tags/%E7%BB%9F%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>一场源自豆瓣的：西湖夜奔</title>
    <link href="http://yoursite.com/2018/12/09/403-%E8%A5%BF%E6%B9%96%E5%A4%9C%E5%A5%94/"/>
    <id>http://yoursite.com/2018/12/09/403-西湖夜奔/</id>
    <published>2018-12-09T04:45:17.000Z</published>
    <updated>2019-09-28T07:55:39.083Z</updated>
    
    <content type="html"><![CDATA[<p>余拏一小友，拥毳衣炉火，往湖心亭看雪</p><p>这次杭州之旅源于张岱的《湖心亭看雪》，契机是豆瓣主题 #视频·冬天里的第一场雪#，一位豆友的回复。</p><p>下午一点获悉西湖初雪，随即与好友商量一番，便起了夜奔西湖的心思。五点定了行程筹备出发，赶了赶高铁，晚九点半抵达杭州。出地铁寒气扑面、雪花纷飞、惊喜万分，便觉我这场湖心亭梦寻成了。到宾馆安顿收拾停当，十一点出发西湖，开始一场雪夜漫步。</p><p>从南宋御街出发，路古朴、银杏宜人，见到了这次旅途中成百上千雪人中的第一个。外面天极冷，初时雪落如撒盐，打在伞上沙沙作响，随后雪花渐大，看到了我对冬天的第一意象：路灯下的雪花纷飞。</p><p>后于涌金公园近西湖畔，顺时针环湖向前。撑伞、踩雪，到柳月优风，看到小朋友凌晨堆雪，到柳浪闻莺，遇夫妻一双，雪夜极似红拂。我与阿毛互叹，莫说相公痴，更有痴似相公者何止二人。</p><p><img src="https://img3.doubanio.com/view/note/l/public/p56391285.webp" alt="红拂夜奔"><br>继续向前，目标雷峰塔。一路谈金庸、红楼、八卦、歌曲，像极了曲苑杂坛，好友博闻强识且健谈，我开心且享受。看着雷峰塔的影子行至景区，结果景区关闭。于是夜闯雷峰塔景区，躲过一波巡逻人员见到一面“夕照毓秀”的墙壁，便哼起了河海校歌，钟灵毓秀石头城。之后继续违规在景区内晃荡，又来了一波巡查，无奈只能退出去，回去的路上才发现有座亭子下面吊了三颗摄像头😂</p><p>出雷峰塔看看时间靠近两点，行程约西湖四分之一，纠结一会是否要走完西湖，想一想还得留余力第二天泛舟湖心亭便放弃了。于是返程，哼唱冰雨、校歌，途中偶遇两个跌落凡尘的柚子，捡一颗好看的带了回去。</p><p>至此西湖夜奔结束。是夜，满足了我对雪夜、西湖的意象，勾起了看通行红楼梦和87红楼梦剧的兴趣。</p><p>第二日，从观荷区近西湖，逆时针行走。看孤山、行白堤、过断桥，进平湖秋月，乘游船、登湖心亭。路上行人比肩接踵，绿杨白堤，断桥踩雪。</p><p>张岱崇祯五年，用一篇《湖心亭看雪》写下人生之大寂寞，386年后哄来我们看雪。登岸，湖心亭极小，10分钟即可绕行一周。见虫二碑，见湖心亭牌，见一姑娘美丽动人。</p><p><img src="https://img3.doubanio.com/view/note/l/public/p56391286.webp" alt="湖心姑娘"><br>回望西湖景色，雾凇沆砀，天与云与山与水，上下一白。湖上影子，惟长堤一痕、断桥两座，其上人影绰绰，便知隔世。</p><p><img src="https://img1.doubanio.com/view/note/l/public/p56391287.webp" alt="上下一白"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;余拏一小友，拥毳衣炉火，往湖心亭看雪&lt;/p&gt;
&lt;p&gt;这次杭州之旅源于张岱的《湖心亭看雪》，契机是豆瓣主题 #视频·冬天里的第一场雪#，一位豆友的回复。&lt;/p&gt;
&lt;p&gt;下午一点获悉西湖初雪，随即与好友商量一番，便起了夜奔西湖的心思。五点定了行程筹备出发，赶了赶高铁，晚九点半抵
      
    
    </summary>
    
    
      <category term="游记向" scheme="http://yoursite.com/categories/%E6%B8%B8%E8%AE%B0%E5%90%91/"/>
    
    
      <category term="西湖" scheme="http://yoursite.com/tags/%E8%A5%BF%E6%B9%96/"/>
    
      <category term="豆瓣" scheme="http://yoursite.com/tags/%E8%B1%86%E7%93%A3/"/>
    
      <category term="夜行" scheme="http://yoursite.com/tags/%E5%A4%9C%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>OpenCV 读取视频并跳帧保存为图片</title>
    <link href="http://yoursite.com/2018/07/31/103-OpenCV%E8%AF%BB%E5%8F%96%E8%A7%86%E9%A2%91%E5%B9%B6%E8%B7%B3%E5%B8%A7%E4%BF%9D%E5%AD%98%E4%B8%BA%E5%9B%BE%E7%89%87/"/>
    <id>http://yoursite.com/2018/07/31/103-OpenCV读取视频并跳帧保存为图片/</id>
    <published>2018-07-31T04:45:17.000Z</published>
    <updated>2019-09-28T07:41:14.512Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OpenCV读取视频并跳帧保存为图片"><a href="#OpenCV读取视频并跳帧保存为图片" class="headerlink" title="OpenCV读取视频并跳帧保存为图片"></a>OpenCV读取视频并跳帧保存为图片</h1><p>[TOC]</p><h3 id="介绍几个有关视频读取的函数："><a href="#介绍几个有关视频读取的函数：" class="headerlink" title="介绍几个有关视频读取的函数："></a>介绍几个有关视频读取的函数：</h3><h4 id="VideoCapture-VideoCapture"><a href="#VideoCapture-VideoCapture" class="headerlink" title="VideoCapture::VideoCapture"></a><strong>VideoCapture::VideoCapture</strong></h4><p>​    VideoCapture可以从文件中或者摄像头中读取视频，这是提供给C++的接口的，C的接口是CvCapture结构。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">VideoCapture::VideoCapture(conststring&amp; filename)</span><br><span class="line">VideoCapture::VideoCapture(<span class="keyword">int</span> device)</span><br></pre></td></tr></table></figure><p>上面是初始化VideoCapture对象的，第一个是从文件中读取，第二个是从设备中读取，默认设备在这里是0；</p><p>例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">VideoCapturecapture(“sample.avi”); <span class="comment">/*读取sample.avi文件*/</span></span><br><span class="line">VideoCapturecapture(<span class="number">0</span>); <span class="comment">/*如果只有一个摄像头，capture会得到摄像头的视频*/</span></span><br></pre></td></tr></table></figure><h4 id="VideoCapture-Open"><a href="#VideoCapture-Open" class="headerlink" title="VideoCapture::Open"></a><strong>VideoCapture::Open</strong></h4><p>​    打开视频文件或者视频设备（例如摄像头）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> VideoCapture::open(<span class="keyword">const</span> <span class="built_in">string</span>&amp; filename)</span><br><span class="line"><span class="keyword">bool</span> VideoCapture::open(<span class="keyword">int</span> device)</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">VideoCapturecapture;</span><br><span class="line">capture.open(<span class="string">"sample.avi"</span>);</span><br><span class="line"><span class="comment">/*这里的两句等效于上面的VideoCapturecapture("sample.avi")，capture.open(0)*/</span></span><br></pre></td></tr></table></figure><blockquote><p>上面的视频文件打开，用完后，最好调用 <strong>capture.release()</strong> 来关闭刚刚打开的文件</p></blockquote><h4 id="VideoCapture-release"><a href="#VideoCapture-release" class="headerlink" title="VideoCapture::release"></a><strong>VideoCapture::release</strong></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> VideoCapture::release()</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">capture.release(); <span class="comment">/*释放打开的视频*/</span></span><br></pre></td></tr></table></figure><h4 id="VideoCapture-isOpened"><a href="#VideoCapture-isOpened" class="headerlink" title="VideoCapture::isOpened"></a><strong>VideoCapture::isOpened</strong></h4><p>判断视频是否被打开，成功打开返回ture，否则false。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> VideoCapture::open(<span class="keyword">const</span> <span class="built_in">string</span>&amp; filename)</span><br><span class="line"><span class="keyword">bool</span> VideoCapture::open(<span class="keyword">int</span> device)</span><br></pre></td></tr></table></figure><h4 id="VideoCapture-grab"><a href="#VideoCapture-grab" class="headerlink" title="VideoCapture::grab"></a><strong>VideoCapture::grab</strong></h4><p>从视频文件中或者设备中获取下一帧，该方法成功调用返回ture；主要用于多摄像头情况下，特别当那些摄像头没有实现硬件同步。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> VideoCapture::grab()</span><br></pre></td></tr></table></figure><p>grab之后，需要调用retrive对获取的帧进行解码。</p><h4 id="VideoCapture-retrieve"><a href="#VideoCapture-retrieve" class="headerlink" title="VideoCapture::retrieve"></a><strong>VideoCapture::retrieve</strong></h4><p>对grab()得到的帧进行解码。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> VideoCapture::retrieve(Mat&amp; image, <span class="keyword">int</span> channel=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h4 id="VideoCapture-read"><a href="#VideoCapture-read" class="headerlink" title="VideoCapture::read"></a><strong>VideoCapture::read</strong></h4><p>获取、解码，这个方法结合了grab和retrieve，比较方便，</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">VideoCapture&amp; VideoCapture::<span class="keyword">operator</span>&gt;&gt;(Mat&amp; image)</span><br><span class="line"><span class="keyword">bool</span> VideoCapture::read(Mat&amp; image)</span><br></pre></td></tr></table></figure><p>例子1：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一</span></span><br><span class="line"><span class="keyword">if</span>(!capture.read(frame))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"读取视频失败"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span><span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方法二</span></span><br><span class="line">capture &gt;&gt;frame;</span><br></pre></td></tr></table></figure><p> 这两个方法都可以，不过第一个能够判断，建议使用第一个，程序更健壮。</p><h4 id="VideoCapture-get"><a href="#VideoCapture-get" class="headerlink" title="VideoCapture::get"></a><strong>VideoCapture::get</strong></h4><p>返回VideoCapture的一些属性</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> VideoCapture::get(<span class="keyword">int</span> propId)</span><br></pre></td></tr></table></figure><p>probId可以是下面的：</p><p>·  <strong>CV_CAP_PROP_POS_MSEC</strong> Current position of the video file in milliseconds or video capture timestamp.</p><p>·  <strong>CV_CAP_PROP_POS_FRAMES</strong> 0-basedindex of the frame to be decoded/captured next.</p><p>·  <strong>CV_CAP_PROP_POS_AVI_RATIO</strong> Relativeposition of the video file: 0 - start of the film, 1 - end of the film.</p><p>·  <strong>CV_CAP_PROP_FRAME_WIDTH</strong> Width of theframes in the video stream.</p><p>·  <strong>CV_CAP_PROP_FRAME_HEIGHT</strong> Height ofthe frames in the video stream.</p><p>·  <strong>CV_CAP_PROP_FPS</strong> Frame rate.</p><p>·  <strong>CV_CAP_PROP_FOURCC</strong> 4-character code of codec.</p><p>·  <strong>CV_CAP_PROP_FRAME_COUNT</strong> Number of frames in the video file.</p><p>·  <strong>CV_CAP_PROP_FORMAT</strong> Format ofthe Mat objects returned by retrieve() .</p><p>·  <strong>CV_CAP_PROP_MODE</strong> Backend-specificvalue indicating the current capture mode.</p><p>·  <strong>CV_CAP_PROP_BRIGHTNESS</strong> Brightness of the image (only for cameras).</p><p>·  <strong>CV_CAP_PROP_CONTRAST</strong> Contrast of the image (only for cameras).</p><p>·  <strong>CV_CAP_PROP_SATURATION</strong> Saturation of the image (only for cameras).</p><p>·  <strong>CV_CAP_PROP_HUE</strong> Hue of theimage (only for cameras).</p><p>·  <strong>CV_CAP_PROP_GAIN</strong> Gain of theimage (only for cameras).</p><p>·  <strong>CV_CAP_PROP_EXPOSURE</strong> Exposure(only for cameras).</p><p>·  <strong>CV_CAP_PROP_CONVERT_RGB</strong> Boolean flags indicating whether images should be converted to RGB.</p><p>·  <strong>CV_CAP_PROP_WHITE_BALANCE</strong> Currently not supported</p><p>·  <strong>CV_CAP_PROP_RECTIFICATION</strong> Rectification flag for stereo cameras (note: only supported by DC1394 v 2.x backendcurrently)</p><h4 id="VideoCapture-set"><a href="#VideoCapture-set" class="headerlink" title="VideoCapture::set"></a><strong>VideoCapture::set</strong></h4><p>VideoCapture类的set方法可以允许我们取出视频中某个位置的帧，它有一些参数，可以按时间，也可以按帧号，还可以按视频长短的比例。 </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> VideoCapture::<span class="built_in">set</span>(<span class="keyword">int</span> propId, <span class="keyword">double</span> value)</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第100帧</span></span><br><span class="line"><span class="keyword">double</span> position=<span class="number">100.0</span>;</span><br><span class="line">capture.<span class="built_in">set</span>(CV_CAP_PROP_POS_FRAMES,position);</span><br><span class="line"><span class="comment">// 第1e6毫秒</span></span><br><span class="line"><span class="keyword">double</span> position=<span class="number">1e6</span>;</span><br><span class="line">capture.<span class="built_in">set</span>(CV_CAP_PROP_POS_MSEC,position);</span><br><span class="line"><span class="comment">// 视频1/2位置</span></span><br><span class="line"><span class="keyword">double</span> position=<span class="number">0.5</span>;</span><br><span class="line">capture.<span class="built_in">set</span>(CV_CAP_PROP_POS_AVI_RATIO,position);</span><br></pre></td></tr></table></figure><h3 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h3><p>下面的是视频读取和将视频内的画面转化为图片的代码，里面的注释应该足够解释了。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/core/core.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/imgproc/imgproc.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">VideoCapture <span class="title">capture</span><span class="params">( <span class="string">"E:/Data/警戒线/@20180727105959_20180727115959_2502.avi"</span> )</span></span>;<span class="comment">/*打开视频文件：其实就是建立一个VideoCapture结构*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( !capture.isOpened( ) )<span class="comment">/*检测是否正常打开:成功打开时，isOpened返回ture*/</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"fail toopen!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> totalFrameNumber = capture.get( CV_CAP_PROP_FRAME_COUNT );<span class="comment">/*获取视频帧数*/</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"整个视频共"</span> &lt;&lt; totalFrameNumber &lt;&lt; <span class="string">"帧"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> frameToStart = <span class="number">1</span>;</span><br><span class="line">capture.<span class="built_in">set</span>( CV_CAP_PROP_POS_FRAMES, frameToStart );<span class="comment">/*设置开始帧*/</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"从第"</span> &lt;&lt; frameToStart &lt;&lt; <span class="string">"帧开始读"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> frameToStop = <span class="number">300</span>;<span class="comment">/*设置结束帧*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( frameToStop &lt; frameToStart )</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"结束帧小于开始帧，程序错误，即将退出！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"结束帧为：第"</span> &lt;&lt; frameToStop &lt;&lt; <span class="string">"帧"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> rate = capture.get( CV_CAP_PROP_FPS );<span class="comment">/*获取帧率*/</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"帧率为:"</span> &lt;&lt; rate &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Mat frame;<span class="comment">/*承载每一帧的图像*/</span></span><br><span class="line"><span class="keyword">bool</span> stop = <span class="literal">false</span>;<span class="comment">/*定义一个用来控制读取视频循环结束的变量*/</span></span><br><span class="line"><span class="keyword">double</span> delay = <span class="number">1000</span> / rate;<span class="comment">/*两帧间的间隔时间:waitKey(intdelay=0)当delay≤ 0时会永远等待；当delay&gt;0时会等待delay毫秒*/</span></span><br><span class="line"><span class="keyword">long</span> currentFrame = frameToStart;<span class="comment">/*currentFrame是在循环体中控制读取到指定的帧后循环结束的变量*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//利用while循环读取帧</span></span><br><span class="line"><span class="keyword">while</span> ( !stop )</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//读取下一帧</span></span><br><span class="line"><span class="keyword">if</span> ( !capture.read( frame ) )</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"读取视频失败"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//cout &lt;&lt; "正在读取第" &lt;&lt; currentFrame &lt;&lt; "帧" &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//namedWindow( "Extractedframe" );</span></span><br><span class="line"><span class="comment">//imshow( "Extractedframe", frame );</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 每隔50帧写一次图片</span></span><br><span class="line"><span class="keyword">if</span> ( currentFrame % <span class="number">50</span> == <span class="number">0</span> )</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"正在写第"</span> &lt;&lt; currentFrame &lt;&lt; <span class="string">"帧"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">stringstream</span> str;</span><br><span class="line">str &lt;&lt; <span class="string">"G:/test_pic/"</span> &lt;&lt; currentFrame &lt;&lt; <span class="string">".png"</span>;<span class="comment">/*图片存储位置*/</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; str.str( ) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">imwrite( str.str( ), frame );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当时间结束前没有按键按下时，返回值为-1；否则返回按键</span></span><br><span class="line"><span class="keyword">int</span> c = waitKey( delay );</span><br><span class="line"><span class="keyword">if</span> ( ( <span class="keyword">char</span> )c == <span class="number">27</span> || currentFrame &gt; frameToStop )<span class="comment">/*按下ESC或者到达指定的结束帧后退出读取视频*/</span></span><br><span class="line">&#123;</span><br><span class="line">stop = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> ( c &gt;= <span class="number">0</span> )<span class="comment">/*按下按键后会停留在当前帧，等待下一次按键*/</span></span><br><span class="line">&#123;</span><br><span class="line">waitKey( <span class="number">0</span> );</span><br><span class="line">&#125;</span><br><span class="line">currentFrame++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭视频文件</span></span><br><span class="line">capture.release( );</span><br><span class="line">waitKey( <span class="number">0</span> );</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h3><p>读取后的图片，因为图片很多，上面代码在设置的时候，只读取了300帧</p>]]></content>
    
    <summary type="html">
    
      opencv
    
    </summary>
    
    
      <category term="技术向" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"/>
    
    
      <category term="OpenCV" scheme="http://yoursite.com/tags/OpenCV/"/>
    
      <category term="图像处理" scheme="http://yoursite.com/tags/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
      <category term="C++" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="视频" scheme="http://yoursite.com/tags/%E8%A7%86%E9%A2%91/"/>
    
      <category term="帧" scheme="http://yoursite.com/tags/%E5%B8%A7/"/>
    
  </entry>
  
  <entry>
    <title>大报恩寺导览</title>
    <link href="http://yoursite.com/2018/07/22/402-%E5%A4%A7%E6%8A%A5%E6%81%A9%E5%AF%BA%E5%AF%BC%E8%A7%88/"/>
    <id>http://yoursite.com/2018/07/22/402-大报恩寺导览/</id>
    <published>2018-07-22T04:45:17.000Z</published>
    <updated>2019-09-28T10:20:46.364Z</updated>
    
    <content type="html"><![CDATA[<h1 id="大报恩寺"><a href="#大报恩寺" class="headerlink" title="大报恩寺"></a>大报恩寺</h1><blockquote><p>科技为骨，宗教、历史为肉体，灯光玻璃掩映，形意兼备，神清气朗</p></blockquote><p>张岱在陶庵梦忆里写报恩塔，称之大国古董、永乐窑器，以小喻大，足见精致。张先生是个审美品位刁钻且精准的人，他很推崇的点我很想去见识一下。</p><p>想了两三次，去了一次被拒，今天终于进了大报恩寺景区。不同于去过的其他露天寺、庙，大报恩寺算是一处室内景点。进景区，过走道，入场馆，左手边是游览起点。</p><p><img src="https://img3.doubanio.com/view/note/l/public/p52457284.webp" alt="景区入口"></p><p>场馆整体用玻璃造就，透光好。室内BGM选的好，大气不疏离，慈祥不随意。向前第一处是<code>长干佛脉</code>，见琉璃璀璨、见毁弃残存的基底、见历史传说。</p><p><img src="https://img3.doubanio.com/view/note/l/public/p52457292.webp" alt="景区入口"></p><p>而后转角，转身即是<code>千年对望</code>，佛祖头像与玄奘对望凝视非常震撼。从长廊向玄奘走去，脚下步步生莲，一共七朵，一步一莲花这种意境真是被阐述地恰到好处。(<em>我想看看原理，特意试着踩灯芯莲花不开，确认了传感器在玻璃下地灯的边缘，这种结合真是漂亮。</em>)</p><p><img src="https://img3.doubanio.com/view/note/l/public/p52457300.webp" alt="千年对望"></p><p>再往前是《国家宝藏》中秦海璐守护的国宝<code>琉璃拱门</code>。拱门华丽闪光，门上雕刻栩栩如生有威严。而后<code>莲池海会</code>，灯光与科技营造出的景象当真使人深陷其中无法自拔，在此尤其佩服大报恩寺遗址的建设团队。（<em>这里我没有拍好，必须身历其境才能体会</em>）</p><p><img src="https://img1.doubanio.com/view/note/l/public/p52457157.webp" alt="莲池海会"></p><p>而后<code>南朝四百八十寺</code>，一座座知名的古寺模型陈列在展厅：鸡鸣寺、栖霞寺、灵谷寺等。</p><p><img src="https://img3.doubanio.com/view/note/l/public/p52457343.webp" alt="寺庙陈列"></p><p>往前，过飞天走廊，迎面<code>舍利佛光</code>相当梦幻，一方空间里全是闪烁的星星，中心设有佛像从而使这里不至于轻浮。关于佛光，也是有着典故，用现代科技去还原历史故事，而且做的不过分这是最难的地方。</p><p><img src="http://pb8ci5khn.bkt.clouddn.com/blog/180722/lECADb2lfG.png" alt="舍利佛光"></p><p>再往后到一处令我震撼最深的地方<code>感恩众生</code>，这里像是种了《阿凡达》里的神树，树枝条状垂下，树下众生芸芸，整个场景如梦般美丽与震撼，自己化成了树下众生之一，面对天道轮回。也是在这里我有心向佛了。为了不破意境，这里放一张看不出什么的图。有机会一定要去亲身体会，大报恩寺-感恩众生。</p><p><img src="https://img3.doubanio.com/view/note/l/public/p52457161.webp" alt="感恩众生"></p><p>出这方空间，迎来一个比较安静祥和的画面，菩提树下释迦摩尼参禅。这时候遇到一个小姑娘，很是应景。</p><p> <img src="https://img3.doubanio.com/view/note/l/public/p52457164.webp" alt="菩提树"></p><p>之后，走古色古香的文化长廊，两边有风趣的画作，可以留意看一下。</p><p><img src="http://pb8ci5khn.bkt.clouddn.com/blog/180722/h2BI28jjHc.png" alt="文化长廊"></p><p>最后便是终点，可以买些纪念品。</p><p>另外提一句，晚上7点半开始会有报恩寺感恩演出，据说质量很高不亚于话剧表演。</p><p>大报恩寺是我见过现代科技和宗教文化结合最好的地方，用科技还原精神世界中的可能，真是太美妙了。千年对望、莲池海会、舍利佛光、感恩众生，处处是对光的运用和对科技的把控。这种创新与设计感，非常值得尊重。</p><p>我逛过千篇一律的古镇、摊点相同文化小街、遮遮掩掩的园林故里、泰安的山、连云港的海，真正喜欢的却并不多。</p><p>法起寺、灵谷寺、金山寺、大报恩寺，可能我的审美品味都交给这几座寺庙了吧。</p><blockquote><p>千年对望那一处，确认下眼神</p></blockquote>]]></content>
    
    <summary type="html">
    
      大报恩寺
    
    </summary>
    
    
      <category term="游记向" scheme="http://yoursite.com/categories/%E6%B8%B8%E8%AE%B0%E5%90%91/"/>
    
    
      <category term="大报恩寺" scheme="http://yoursite.com/tags/%E5%A4%A7%E6%8A%A5%E6%81%A9%E5%AF%BA/"/>
    
      <category term="景点" scheme="http://yoursite.com/tags/%E6%99%AF%E7%82%B9/"/>
    
      <category term="建筑" scheme="http://yoursite.com/tags/%E5%BB%BA%E7%AD%91/"/>
    
  </entry>
  
  <entry>
    <title>OpenCV 绘制图片的三维空间显示图</title>
    <link href="http://yoursite.com/2018/07/02/102-OpenCV-%E7%BB%98%E5%88%B6%E5%9B%BE%E7%89%87%E7%9A%84%E4%B8%89%E7%BB%B4%E7%A9%BA%E9%97%B4%E6%98%BE%E7%A4%BA%E5%9B%BE/"/>
    <id>http://yoursite.com/2018/07/02/102-OpenCV-绘制图片的三维空间显示图/</id>
    <published>2018-07-02T04:45:17.000Z</published>
    <updated>2019-09-28T07:37:04.018Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>python 3.6 + opencv</p></blockquote><p>输入图片转为灰度图，使用numpy将其转化为数字矩阵<br>用matplot将矩阵在三维空间中绘制出来</p><p>输入图片：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3llZmNpb24vUGljRGF0YS9tYXN0ZXIvaW1nL3RpbmEuanBn?x-oss-process=image/format,png" alt></p><p>输出效果：<br>俯视<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3llZmNpb24vUGljRGF0YS9tYXN0ZXIvaW1nLzIwMTkwMzIxMTQwOTA2LnBuZw?x-oss-process=image/format,png" alt></p><p>仰视<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3llZmNpb24vUGljRGF0YS9tYXN0ZXIvaW1nLzIwMTkwMzIxMTQwODQ0LnBuZw?x-oss-process=image/format,png" alt><br>侧面看<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3llZmNpb24vUGljRGF0YS9tYXN0ZXIvaW1nLzIwMTkwMzIxMTQxMDE4LnBuZw?x-oss-process=image/format,png" alt></p><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">import numpy as np</span><br><span class="line">import cv2 as cv</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">from mpl_toolkits.mplot3d import Axes3D</span><br><span class="line">from matplotlib import cm</span><br><span class="line">from matplotlib.ticker import LinearLocator, FormatStrFormatter</span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize=(16,12))</span><br><span class="line">ax = fig.gca(projection=&quot;3d&quot;)</span><br><span class="line"></span><br><span class="line">img = cv.imread(&quot;tina.jpg&quot;)# 修改图片位置</span><br><span class="line">img = cv.cvtColor(img,cv.COLOR_BGR2GRAY)</span><br><span class="line">imgd = np.array(img)      # image类 转 numpy</span><br><span class="line"></span><br><span class="line"># 准备数据</span><br><span class="line">sp = img.shape</span><br><span class="line">h = int(sp[0])#height(rows) of image</span><br><span class="line">w = int(sp[1])#width(colums) of image</span><br><span class="line"></span><br><span class="line">x = np.arange(0,w,1)</span><br><span class="line">y = np.arange(0,h,1)</span><br><span class="line">x,y = np.meshgrid(x,y)</span><br><span class="line">z = imgd</span><br><span class="line">surf = ax.plot_surface(x, y, z, cmap=cm.coolwarm)  # cmap指color map</span><br><span class="line"></span><br><span class="line"># 自定义z轴</span><br><span class="line">ax.set_zlim(-10, 255)</span><br><span class="line">ax.zaxis.set_major_locator(LinearLocator(10))  # z轴网格线的疏密，刻度的疏密，20表示刻度的个数</span><br><span class="line">ax.zaxis.set_major_formatter(FormatStrFormatter(&apos;%.02f&apos;))  # 将z的value字符串转为float，保留2位小数</span><br><span class="line"></span><br><span class="line"># 设置坐标轴的label和标题</span><br><span class="line">ax.set_xlabel(&apos;x&apos;, size=15)</span><br><span class="line">ax.set_ylabel(&apos;y&apos;, size=15)</span><br><span class="line">ax.set_zlabel(&apos;z&apos;, size=15)</span><br><span class="line">ax.set_title(&quot;Surface plot&quot;, weight=&apos;bold&apos;, size=20)</span><br><span class="line"></span><br><span class="line"># 添加右侧的色卡条</span><br><span class="line">fig.colorbar(surf, shrink=0.6, aspect=8)  # shrink表示整体收缩比例，aspect仅对bar的宽度有影响，aspect值越大，bar越窄</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>源码地址：<a href="https://github.com/yefcion/OpenCV-VS/tree/master/python-cv" target="_blank" rel="noopener">GitHub</a><br>CSDN下载地址：<a href="https://download.csdn.net/download/yefcion/10524135" target="_blank" rel="noopener">源码+图片</a></p>]]></content>
    
    <summary type="html">
    
      opencv
    
    </summary>
    
    
      <category term="技术向" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"/>
    
    
      <category term="OpenCV" scheme="http://yoursite.com/tags/OpenCV/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="matplot" scheme="http://yoursite.com/tags/matplot/"/>
    
      <category term="图像处理" scheme="http://yoursite.com/tags/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Typro 使用入门</title>
    <link href="http://yoursite.com/2018/05/24/101-Typora%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2018/05/24/101-Typora使用入门/</id>
    <published>2018-05-24T04:45:17.000Z</published>
    <updated>2019-09-28T07:51:28.050Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Typora-语法结构与功能"><a href="#Typora-语法结构与功能" class="headerlink" title="Typora 语法结构与功能"></a>Typora 语法结构与功能</h1><h4 id="数学表达式"><a href="#数学表达式" class="headerlink" title="数学表达式"></a>数学表达式</h4><p>要启用这个功能，首先到<code>Preference</code>-&gt;<code>Editor</code>中启用。然后使用<code>$</code>符号包裹Tex命令，例如：<code>$lim_{x \to \infty} \ exp(-x)=0$</code>将产生如下的数学表达式：</p><p>​    $lim_{x \to \infty} \ exp(-x)=0$</p><p>Typora支持Latex的公式编辑，公式编辑几乎和代码编辑的使用方法相同，同样分行内公式和行间公式，行内公式用两个<code>$</code>包裹起来，行间公式可以使用快捷键<code>command + alt + b</code>和<code>$$ + enter</code>插入：</p><h4 id="下标"><a href="#下标" class="headerlink" title="下标"></a>下标</h4><p>下标使用<code>~</code>包裹，例如：<code>H~2~O</code>将产生水的分子式。</p><p>​    H<del>2</del>O</p><h4 id="上标"><a href="#上标" class="headerlink" title="上标"></a>上标</h4><p>​    x ^2^</p><h4 id="插入表情"><a href="#插入表情" class="headerlink" title="插入表情"></a>插入表情</h4><p>使用<code>:happy:</code>输入高兴的表情，使用<code>:sad:</code>输入悲伤的表情，使用<code>:cry:</code>输入哭的表情等。以此类推！</p><p>:happy:</p><p>:sad:</p><h4 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h4><p>用HTML的语法<code>&lt;u&gt;underline&lt;/u&gt;</code>将产生下划线Underline.</p><p><u>underline</u></p><h4 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h4><p>GFM添加了删除文本的语法，这是标准的Markdown语法木有的。使用``<del>包裹的文本将会具有删除的样式，例如`</del>删除文本<del>`将产生</del>删除文本~~的样式。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>输入<code>~~~</code>或者“`然后回车，可以输入代码块，并且可以选择代码的语言。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public Class HelloWorld&#123;</span><br><span class="line"></span><br><span class="line">  System.out.println(&quot;Hello World!&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">123456</span><br></pre></td></tr></table></figure><p>插入代码的语法和其他markdown并没有区别，同样支持行内代码和行间代码块，语法是相同的，只是在插入行间代码时可以选择快捷键<code>command + alt + c</code>和输入“`后按回车两种方式，效果是一样的:</p><p>右下角可以输入代码的语言，可以根据不同的语言自动高亮显示。</p><h4 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">**使用两个*号强调内容**</span><br><span class="line">__使用两个下划线强调内容__12</span><br></pre></td></tr></table></figure><p><strong>使用两个*号强调内容</strong><br><strong>使用两个下划线强调内容</strong></p><h4 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h4><p>在标准的Markdown语法中，*和_包裹的内容会是斜体显示，但是GFM下划线一般用来分隔人名和代码变量名，因此我们推荐是用星号来包裹斜体内容。如果要显示星号，则使用转义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\*1</span><br></pre></td></tr></table></figure><h4 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h4><p>这个功能和简书的拖入图片即可插入图片功能是一样的，但是这个功能默认是关闭的需要在设置中手动开启，设置的路径为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Preferences -&gt; Editor1</span><br></pre></td></tr></table></figure><p>在<code>Image Drag &amp; Drop</code>后打上勾就可以了，如图所示：</p><p><img src="http://upload-images.jianshu.io/upload_images/1182605-1cbd9bb6f1ed0be4.gif?imageMogr2/auto-orient/strip" alt="img"></p><h4 id="插入URL连接"><a href="#插入URL连接" class="headerlink" title="插入URL连接"></a>插入URL连接</h4><p>使用尖括号包裹的url将产生一个连接，例如：<code>&lt;www.baidu.com&gt;</code>将产生连接:<a href="http://www.baidu.com/" target="_blank" rel="noopener">www.baidu.com</a>.</p><p>如果是标准的url，则会自动产生连接，例如:<a href="http://www.google.com/" target="_blank" rel="noopener">www.google.com</a></p><h4 id="目录列表Table-of-Contents（TOC）"><a href="#目录列表Table-of-Contents（TOC）" class="headerlink" title="目录列表Table of Contents（TOC）"></a>目录列表Table of Contents（TOC）</h4><p>输入[toc]然后回车，将会产生一个目录，这个目录抽取了文章的所有标题，自动更新内容。</p><h4 id="水平分割线"><a href="#水平分割线" class="headerlink" title="水平分割线"></a>水平分割线</h4><p>使用<code>***</code>或者<code>---</code>，然后回车，来产生水平分割线。</p><h4 id="标注"><a href="#标注" class="headerlink" title="标注"></a>标注</h4><p>我们可以对某一个词语进行标注。例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">某些人用过了才知道[^注释]</span><br><span class="line">[^注释]:Somebody that I used to know.12</span><br></pre></td></tr></table></figure><p>把鼠标放在<code>注释</code>上，将会有提示内容<a href="http://blog.csdn.net/moonclearner/article/details/52842679#fn:" target="_blank" rel="noopener">1</a>。</p><h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">|姓名|性别|毕业学校|工资|</span><br><span class="line">|:---|:---:|:---:|---:|</span><br><span class="line">|杨洋|男|重庆交通大学|3200|</span><br><span class="line">|峰哥|男|贵州大学|5000|</span><br><span class="line">|坑货|女|北京大学|2000|12345</span><br></pre></td></tr></table></figure><p>其中代码的第二行指定对齐的方式，第一个是左对齐，第二个和第三个是居中，最后一个是右对齐。</p><table><thead><tr><th>姓名</th><th>性别</th><th>毕业学校</th><th>工资</th></tr></thead><tbody><tr><td>杨洋</td><td>男</td><td>重庆交通大学</td><td>3200</td></tr><tr><td>峰哥</td><td>男</td><td>贵州大学</td><td>5000</td></tr><tr><td>坑货</td><td>女</td><td>北京大学</td><td>2000</td></tr></tbody></table><p>使用快捷键<code>ctrl+T</code>可以快速插入表格，最上面可以选择行列数、没一列的对齐方式，并且支持在表格中使用<code>tab</code>键跳到下一单元格。</p><h4 id="数学表达式块"><a href="#数学表达式块" class="headerlink" title="数学表达式块"></a>数学表达式块</h4><p>输入两个美元符号，然后回车，就可以输入数学表达式块了。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$$\mathbf&#123;V&#125;_1 \times \mathbf&#123;V&#125;_2 =  \begin&#123;vmatrix&#125; \mathbf&#123;i&#125; &amp; \mathbf&#123;j&#125; &amp; \mathbf&#123;k&#125; \\\frac&#123;\partial X&#125;&#123;\partial u&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial u&#125; &amp; 0 \\\frac&#123;\partial X&#125;&#123;\partial v&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial v&#125; &amp; 0 \\\end&#123;vmatrix&#125;$$1</span><br></pre></td></tr></table></figure><p>V1×V2=∣∣∣∣∣i∂X∂u∂X∂vj∂Y∂u∂Y∂vk00∣∣∣∣∣V1×V2=|ijk∂X∂u∂Y∂u0∂X∂v∂Y∂v0|</p><h4 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- [ ] 吃饭</span><br><span class="line">- [x] 逛街</span><br><span class="line">- [ ] 看电影123</span><br></pre></td></tr></table></figure><ul><li><input disabled type="checkbox"> 吃饭</li><li><input checked disabled type="checkbox"> 逛街</li><li><input disabled type="checkbox"> 看电影</li></ul><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><p>输入+, -, *,创建无序的列表，使用任意数字开头，创建有序列表，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">**无序的列表**</span><br><span class="line">* tfboys</span><br><span class="line">* 杨洋</span><br><span class="line">* 我爱你1234</span><br></pre></td></tr></table></figure><h4 id="块引用"><a href="#块引用" class="headerlink" title="块引用"></a>块引用</h4><p>使用&gt;来插入块引用。例如：</p><blockquote><p>这是一个块引用！</p></blockquote><h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><p>使用#表示一级标题，##表示二级标题，以此类推，有6个标题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Typora-语法结构与功能&quot;&gt;&lt;a href=&quot;#Typora-语法结构与功能&quot; class=&quot;headerlink&quot; title=&quot;Typora 语法结构与功能&quot;&gt;&lt;/a&gt;Typora 语法结构与功能&lt;/h1&gt;&lt;h4 id=&quot;数学表达式&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
    
      <category term="技术向" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"/>
    
    
      <category term="Typro" scheme="http://yoursite.com/tags/Typro/"/>
    
      <category term="Markdown" scheme="http://yoursite.com/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>继往开来，梳理人生，寻找自己的使命</title>
    <link href="http://yoursite.com/2017/12/13/604-%E4%BD%9C%E4%B8%9A-%E6%A2%B3%E7%90%86%E4%BA%BA%E7%94%9F%EF%BC%8C%E5%AF%BB%E6%89%BE%E8%87%AA%E5%B7%B1%E7%9A%84%E4%BD%BF%E5%91%BD/"/>
    <id>http://yoursite.com/2017/12/13/604-作业-梳理人生，寻找自己的使命/</id>
    <published>2017-12-13T04:45:17.000Z</published>
    <updated>2019-09-28T13:02:30.631Z</updated>
    
    <content type="html"><![CDATA[<p>我已经生活的这20多年大致可以用三个时间点来划分，中考之后性格觉醒、大二开始认识生活和思考自己、大学毕业后去生活。</p><h3 id="从孩提到初中毕业"><a href="#从孩提到初中毕业" class="headerlink" title="从孩提到初中毕业"></a>从孩提到初中毕业</h3><p>这是一段清澈透明的生活经历。这时候心智发育不全，价值体系为空，成长的主要方式就是接受从外界传输的知识、经验。在父母的照顾下无任何目的成长，逐渐掌握生存与学习的能力。这是生命的积累阶段，慢慢生存、体验，不做甄别地接受各种事物。</p><h3 id="进入高中"><a href="#进入高中" class="headerlink" title="进入高中"></a>进入高中</h3><p>高中时开始了以自己为主导的对生活的探索，同时生活中混入不清楚的东西。这段时间逐渐对自己、对身边的人和事有了观察，并会产生粗浅的推测，发现生活的面目不再是它表现出来的样子。开始有初步的思考，有时会陷入迷茫。</p><h3 id="大二之后"><a href="#大二之后" class="headerlink" title="大二之后"></a>大二之后</h3><p>浊者沉淀，穿过迷茫。摆脱了老师、家长监管，能自己支配行动、对自己的行为负责。开始了解生活背后的原因、开始思索自己的行为、在探索中矫正自己、规划以后的生活。</p><h3 id="大学毕业"><a href="#大学毕业" class="headerlink" title="大学毕业"></a>大学毕业</h3><p>浊者再起。离开学校的环境，慢慢实践此前的规划，开始用经济独立来融入社会。这段时间要适应环境的变化，将此前学到的和推演的东西用到实处，保证养活自己、满足自己。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">无知-接受  |   探索-迷茫   |   思考-规划  |  实践-生活</span><br><span class="line">15 | 4  | 3 | 1</span><br></pre></td></tr></table></figure><p>以上就是我对自己人生的梳理，没有具体时间作为佐证，是纯粹的总结和比喻。</p><p>在自然辩证法的课上，我们讨论的需求层次是：<code>物质需求</code>、<code>爱的需求</code>、<code>自我实现</code>。<br>我觉得自己一毕业就同时面临了这三种需求。对物质的渴望，我需要租房以住宿、需要音响以自我愉悦、需要电脑以满足自己的学习需要；对爱的完善，我希望别人对我的尊重更高、我想与女朋友的爱情更加和谐；自我实现的需求，我想学习更精深的知识、结识更高层次的人、想整理一套自己的价值观和行为模式、想要改变自己人性的缺点。<br>此前不久，我做了一个曾经风靡但是有些幼稚的游戏：罗列词汇，逐个删减。</p><h2 id="我的价值观选择"><a href="#我的价值观选择" class="headerlink" title="我的价值观选择"></a>我的价值观选择</h2><h3 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h3><p>以下 12 个词代表了我所珍视的东西：<br><strong>成就、项目、科研、地位、学习、独立、交流、追求、金钱、爱情、条理、资源</strong></p><h3 id="二、答题步骤"><a href="#二、答题步骤" class="headerlink" title="二、答题步骤"></a>二、答题步骤</h3><p>第一步：请复制这 12 个词，保持位置顺序不变，然后挑选 4 个最不重要的词，加删除线<br>第二步：在第一步剩下的 8 个词中，保持位置顺序不变，挑 3 个最不重要的词，加删除线<br>第三步：在第二步剩下的 5 个词中，保持位置顺序不变，挑 2 个最不重要的词，加删除线<br>第四步：在第三步剩下的 3 个词中，按最重要-最不重要的顺序，将 3 个词排序<br>写下每个步骤的考虑是什么，尽量详细一些：<br>你认为设置这项任务的目的是什么，你的想法？</p><h3 id="三、我的答案"><a href="#三、我的答案" class="headerlink" title="三、我的答案"></a>三、我的答案</h3><h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><p>成就、项目、 <del>科研</del>、 <del>地位</del>、学习、独立、交流、追求、 <del>金钱</del>、爱情、条理、 <del>资源</del></p><h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><p>成就、项目、学习、 <del>独立</del>、交流、追求、 <del>爱情</del>、 <del>条理</del></p><p>####第三步<br><del>成就</del>、项目、学习、交流、 <del>追求</del></p><h4 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h4><p>学习、项目、交流</p><h3 id="四、我的考虑"><a href="#四、我的考虑" class="headerlink" title="四、我的考虑"></a>四、我的考虑</h3><h4 id="1-第一步的考虑"><a href="#1-第一步的考虑" class="headerlink" title="1.第一步的考虑"></a>1.第一步的考虑</h4><ul><li>科研<ul><li>科研是学习的一种，可被取代 </li></ul></li><li>金钱<ul><li>我的人生追求应该是实现自我满足，金钱可带来享受，但我并不需要太多享受</li></ul></li><li>地位<ul><li>与成就冲突，我需要成就</li></ul></li><li>资源<ul><li>掌握资源会让我实现功能获得更多便利，但是我可以自己创造</li></ul></li></ul><h4 id="2-第二步的考虑"><a href="#2-第二步的考虑" class="headerlink" title="2.第二步的考虑"></a>2.第二步的考虑</h4><ul><li>独立<ul><li>独立可以帮我独自完成一项任务和生活</li><li>但是一人独行是不可行的，我需要别人</li></ul></li><li>爱情<ul><li>爱情的妙处在于润物细无声</li><li>对此我很遗憾</li></ul></li><li>条理<ul><li>条理让我自己身心舒畅，让我有别他人</li><li>没有条理的学习也是可以的</li></ul></li></ul><h4 id="3-第三步的考虑"><a href="#3-第三步的考虑" class="headerlink" title="3.第三步的考虑"></a>3.第三步的考虑</h4><ul><li>成就<ul><li>成就是我对自己要求，要能做出一番事业，适当的成就能激励我学习</li><li>也许成就是一种虚荣的体现</li></ul></li><li>追求<ul><li>追求是最好的规划，人生要有目标，没有目标的话我会像无头苍蝇</li></ul></li></ul><h4 id="4-第四步的考虑"><a href="#4-第四步的考虑" class="headerlink" title="4.第四步的考虑"></a>4.第四步的考虑</h4><ul><li>学习<ul><li>我爱学习</li><li>我想掌握知识</li></ul></li><li>项目<ul><li>项目是践行学习的最好办法</li></ul></li><li>交流<ul><li>学习和交流是分不开的，在学习的路上我需要他人的引导与交流</li></ul></li></ul><p>我的使命是成为一个<strong>高段位的学习者</strong>吗？仅就现在这个阶段而言是这个样子，但是以后会改变吗，我不能确定。因为在做个选择游戏的时候每做一次选择我都顾虑重重，像是走了很多条弗洛斯特的林中路，犹豫踌躇，以至于最后得出结论的时候竟有些期期艾艾。</p>]]></content>
    
    <summary type="html">
    
      自然辩证法的一次作业
    
    </summary>
    
    
      <category term="随笔向" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94%E5%90%91/"/>
    
    
      <category term="总结" scheme="http://yoursite.com/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="人生" scheme="http://yoursite.com/tags/%E4%BA%BA%E7%94%9F/"/>
    
      <category term="使命" scheme="http://yoursite.com/tags/%E4%BD%BF%E5%91%BD/"/>
    
  </entry>
  
  <entry>
    <title>2017.10.29 日记</title>
    <link href="http://yoursite.com/2017/10/29/603-2017.10.29%E6%97%A5%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/10/29/603-2017.10.29日记/</id>
    <published>2017-10-29T04:45:17.000Z</published>
    <updated>2019-09-28T13:14:26.560Z</updated>
    
    <content type="html"><![CDATA[<p>时间奇怪如很多东西，似箭、如梭、小白马。最近觉得像地铁，远看进站缓缓，从面前刮过才发觉极速呼啸的可怕。马上十月就过去了，这一号线不知刮走了我多少青春😂_硬性装逼，笑哭_。6月底毕业，7月1正式工作，_所谓的踏上社会_。如今三个月实习期已过，马上就能拿到我的正式工资，这下应该能余点钱了。</p><p>7月真是肆无忌惮的一个月。早早找到工作进入公司，新手保护期基本上没做什么正事。研究PCB板子，AD用了半个月，后来不了了之。唯一收获是刷完了七季<code>权力的游戏</code>。</p><p>8月开始干活、9月开始上学。认真做事了，学了些简单实用的东西。以前你问我怎么分零火线、UPS是干什么的、交换机怎么用，我肯定不知道。你问我学历是什么，本二通信专业毕业、研究生在读。上面那些问题都不会，羞愧、丢人，自觉辱没了_大学生<em>、</em>研究生_的名头。</p><p><strong>越来越高的年龄和学历</strong>与<strong>原地踏步的能力</strong>，是我在读书阶段最基本的矛盾。</p><p>工作内容属强电，说实话技术含量有一点，不高，危险性有一点，极低。好处是基本的生活用电常识是学到了，对于我这类生活白痴倒是挺受用的。这从一定程度上转化了一部分矛盾，但真正的转化还很远。对我自己而言，衡量这一矛盾转化进度的硬性指标是<code>赚到手的钱</code>……<em>我太实在了</em>  (-_-)</p><p>学校这边课程上没什么好说的，现阶段的课像本科一样上。在学校里认识新同学、师兄姐，这点是非常开心的，我非常珍惜。自我总结原因是，身处工作环境却不愿完全脱离学生身份，因而极力想保留一份在学校里的存在感。</p><p>出淮海入河海，唱完水之歌，我也是个水之子。只记得校歌里唱，<strong>大哉河海奔前程</strong>。像是在说学校非家，因而对你不挽留，前途广、竞争强，你就上吧。大概也是因为我这种奇怪的解读，所以对河海我也是没什么归属感😂</p><p>10月工作进正轨，做的活变多，深度也有增加，能认真审视自己。这4个月，工作上承蒙同事照顾，学了很多实用的东西；学习上怪自己想学的多且杂，又没韧性，毫无建树；生活上体会到经济独立的欢愉，除了被拖工资时有点煎熬。</p><p>我审视过自己的学习情况，有小聪明，没大智慧，追求技巧，想走捷径，喜欢规划和总结，却贪享安乐。</p><p>Quora上一个问题，<a href="http://www.zhangzishi.cc/20171029dl.html" target="_blank" rel="noopener">人们在20来岁时应该懂得的道理</a>。提到说记录 20 岁的自己，不然老之将至，今日将军战岂堪。</p>]]></content>
    
    <summary type="html">
    
      关于房子的所见所闻
    
    </summary>
    
    
      <category term="随笔向" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94%E5%90%91/"/>
    
    
      <category term="生活" scheme="http://yoursite.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="日记" scheme="http://yoursite.com/tags/%E6%97%A5%E8%AE%B0/"/>
    
      <category term="总结" scheme="http://yoursite.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>有人住高楼</title>
    <link href="http://yoursite.com/2017/10/13/603-%E6%9C%89%E4%BA%BA%E4%BD%8F%E9%AB%98%E6%A5%BC/"/>
    <id>http://yoursite.com/2017/10/13/603-有人住高楼/</id>
    <published>2017-10-13T04:45:17.000Z</published>
    <updated>2019-09-28T13:20:03.871Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>有人住高楼，有人处深沟，有人光万丈，有人一身锈。  </p></blockquote><p>前天晚上到宿舍听歌没多久，被一阵急促有力敲门声惊醒，警察带着物业过来查危房。住的公司宿舍三室一厅，客厅隔成的一个单间属于违规改造是危房，检查、拍照、登记之后让拆除。我答应告知公司，又询问得知南京全市范围排查整改危房。我首先想到的是群租房，每个单间用学生床隔成3对上下铺，我宿舍规模的房最多可住20人。再问得知，上下铺也是违规，莫名担心。</p><p>政府排查违规改造住房是好事，减少安全隐患；房东一房低价多租没做错，钱能多收点；房客维持生存低价租房更是无可厚非。看上去谁都没错，可是政府排查，一堆人没房住这样的事情必然会发生。我没足够的知识去分辨对错，我只知道如非生活所迫没人会跟20个人挤一间房，灰色产业不知解决了多少政府没能解决的民生问题。这两天又被北京清理低端人口的新闻命中。低端人口这个名词真让人绝望，当它从政府流出的时那就太让人恶心了。</p><p>人生像杠杆，高走低收。小时候以为自己无所不能，因而立志高远，开始过人生才发觉自己的低能。越长大越意识到这点，不断调整自己的心理预期。现在我揣着走上中产的目标，活在知识、技能学习的焦虑里，以期走到杠杆的中心位置，让能力直视境遇，让目标等于现实。接着却被一堆现状围堵：幼儿园、学校、住房，每个新闻的出现都会引发媒体舆论的关注、媒体的高潮。但是事件却从未被根治，像走马灯一样，隔两年拉出来跑一圈，虐童幼儿园层出不穷、豫章书院不断接力、低端人口从北上广挨个清……</p><p>本想努力摆脱一种环境，结果却像从一种绝望向另一种绝望的奔忙，同时还会看到很多投机者妖异的表演。（我对一群搞直播的妖怪有很严格的看不上。但是资本和流量的倾轧很让人恶心。）不知是媒体让我焦虑还是事实确实如此，前者让人恼火，后者让人绝望。</p><p>我大概积累了很深的负面情绪，本来我只是想抱怨当下火热的知识经济让人痴迷又焦虑，可是一结合自己就想多了。</p>]]></content>
    
    <summary type="html">
    
      关于房子的所见所闻
    
    </summary>
    
    
      <category term="随笔向" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94%E5%90%91/"/>
    
    
      <category term="生活" scheme="http://yoursite.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="现实" scheme="http://yoursite.com/tags/%E7%8E%B0%E5%AE%9E/"/>
    
      <category term="社会" scheme="http://yoursite.com/tags/%E7%A4%BE%E4%BC%9A/"/>
    
  </entry>
  
</feed>
